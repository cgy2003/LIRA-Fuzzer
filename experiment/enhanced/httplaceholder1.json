{
  "x-generator": "NSwag v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "HttPlaceholder API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost"
    }
  ],
  "paths": {
    "/ph-api/configuration": {
      "get": {
        "tags": ["Configuration"],
        "summary": "An endpoint that is used to retrieve the configuration of the currently running instance of HttPlaceholder.",
        "operationId": "Configuration_GetConfiguration",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK, with the configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationDto"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Configuration"],
        "summary": "An endpoint that is used to update a configuration value at runtime.",
        "operationId": "Configuration_UpdateConfigurationValue",
        "requestBody": {
          "x-name": "input",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigurationValueInputDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/export/requests/{requestId}": {
      "get": {
        "tags": ["Export"],
        "summary": "An endpoint for exporting a request into a specific format.",
        "operationId": "Export_ExportRequest",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "description": "The request ID.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            },
            "x-position": 1
          },
          {
            "name": "type",
            "in": "query",
            "description": "The request export type.",
            "schema": {
              "$ref": "#/components/schemas/RequestExportType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The exported result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestExportResultDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/import/curl": {
      "post": {
        "tags": ["Import"],
        "summary": "An endpoint that is used for creating a stub (or multiple stubs) based on cURL command(s).",
        "operationId": "Import_CreateCurlStubs",
        "parameters": [
          {
            "name": "doNotCreateStub",
            "in": "query",
            "description": "Whether to add the stub to the data source. If set to false, the stub is only returned\nbut not added.\n            ",
            "schema": {
              "type": "boolean",
              "example": false
            },
            "x-position": 2
          },
          {
            "name": "tenant",
            "in": "query",
            "description": "The tenant (category) the stubs should be added under. If no tenant is provided, a tenant name will be generated.",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "finance"
            },
            "x-position": 3
          },
          {
            "name": "stubIdPrefix",
            "in": "query",
            "description": "A piece of text that will be prefixed before the stub ID.",
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "example": "prefix_"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "input",
          "description": "The data which should be added.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK, with the generated stubs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/import/har": {
      "post": {
        "tags": ["Import"],
        "summary": "An endpoint that is used for creating stubs based on a HAR file (HTTP Archive).",
        "operationId": "Import_CreateHarStubs",
        "parameters": [
          {
            "name": "doNotCreateStub",
            "in": "query",
            "description": "Whether to add the stub to the data source. If set to false, the stub is only returned\nbut not added.\n            ",
            "schema": {
              "type": "boolean",
              "example": false
            },
            "x-position": 2
          },
          {
            "name": "tenant",
            "in": "query",
            "description": "The tenant (category) the stubs should be added under. If no tenant is provided, a tenant name will be generated.",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "finance"
            },
            "x-position": 3
          },
          {
            "name": "stubIdPrefix",
            "in": "query",
            "description": "A piece of text that will be prefixed before the stub ID.",
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "example": "prefix_"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "input",
          "description": "The raw HAR JSON input.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK, with the generated stubs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/import/openapi": {
      "post": {
        "tags": ["Import"],
        "summary": "An endpoint that is used for creating stubs based on a OpenAPI definition.\nYou can specify both a JSON or YAML file.",
        "operationId": "Import_CreateOpenApiStubs",
        "parameters": [
          {
            "name": "doNotCreateStub",
            "in": "query",
            "description": "Whether to add the stub to the data source. If set to false, the stub is only returned\nbut not added.\n            ",
            "schema": {
              "type": "boolean",
              "example": false
            },
            "x-position": 2
          },
          {
            "name": "tenant",
            "in": "query",
            "description": "The tenant (category) the stubs should be added under. If no tenant is provided, a tenant name will be generated.",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "finance"
            },
            "x-position": 3
          },
          {
            "name": "stubIdPrefix",
            "in": "query",
            "description": "A piece of text that will be prefixed before the stub ID.",
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "maxLength": 50,
              "example": "prefix_"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "input",
          "description": "The raw OpenAPI JSON or YAML input.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK, with the generated stubs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/metadata": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Gets metadata about the API (like the assembly version).",
        "operationId": "Metadata_Get",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "HttPlaceholder metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataDto"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/metadata/features/{featureFlag}": {
      "get": {
        "tags": ["Metadata"],
        "summary": "Checks whether a specific feature is enabled or not.",
        "operationId": "Metadata_CheckFeature",
        "parameters": [
          {
            "name": "featureFlag",
            "in": "path",
            "required": true,
            "description": "The feature flag to test.",
            "schema": {
              "$ref": "#/components/schemas/FeatureFlagType"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "A model containing whether the feature flag is enabled or not.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/requests": {
      "get": {
        "tags": ["Request"],
        "summary": "Get all Requests.",
        "operationId": "Request_GetAll",
        "parameters": [
          {
            "name": "x-from-identifier",
            "x-originalName": "fromIdentifier",
            "in": "header",
            "description": "The identifier from which to find items. If this is not set; means to query from the\nstart.\n            ",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "12345"
            },
            "x-position": 1
          },
          {
            "name": "x-items-per-page",
            "x-originalName": "itemsPerPage",
            "in": "header",
            "description": "The number of items to show on a page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100,
              "nullable": true,
              "example": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "All request results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestResultDto"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Request"],
        "summary": "Delete all requests. This call flushes all the requests.",
        "operationId": "Request_DeleteAll",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "OK, but no content returned"
          }
        }
      }
    },
    "/ph-api/requests/overview": {
      "get": {
        "tags": ["Request"],
        "summary": "Get overview of all Requests.",
        "operationId": "Request_GetOverview",
        "parameters": [
          {
            "name": "x-from-identifier",
            "x-originalName": "fromIdentifier",
            "in": "header",
            "description": "The identifier from which to find items. If this is not set; means to query from the\nstart.\n            ",
            "schema": {
              "type": "string",
              "nullable": true,
              "example": "12345"
            },
            "x-position": 1
          },
          {
            "name": "x-items-per-page",
            "x-originalName": "itemsPerPage",
            "in": "header",
            "description": "The number of items to show on a page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100,
              "nullable": true,
              "example": 10
            },
            "x-position": 2
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "All request results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestOverviewDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/requests/{correlationId}": {
      "get": {
        "tags": ["Request"],
        "summary": "Gets a specific request by correlation ID.",
        "operationId": "Request_GetRequest",
        "parameters": [
          {
            "name": "correlationId",
            "in": "path",
            "required": true,
            "description": "The request correlation ID.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestResultDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Request"],
        "summary": "Delete a specific request.",
        "operationId": "Request_DeleteRequest",
        "parameters": [
          {
            "name": "correlationId",
            "in": "path",
            "required": true,
            "description": "The correlation ID of the request to delete.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "OK, but no content returned"
          }
        }
      }
    },
    "/ph-api/requests/{correlationId}/response": {
      "get": {
        "tags": ["Request"],
        "summary": "Gets a specific response by request correlation ID.",
        "operationId": "Request_GetResponse",
        "parameters": [
          {
            "name": "correlationId",
            "in": "path",
            "required": true,
            "description": "The request correlation ID.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/requests/{correlationId}/stubs": {
      "post": {
        "tags": ["Request"],
        "summary": "An endpoint which accepts the correlation ID of a request made earlier.\nHttPlaceholder will create a stub based on this request for you to tweak later on.",
        "operationId": "Request_CreateStubForRequest",
        "parameters": [
          {
            "name": "correlationId",
            "in": "path",
            "required": true,
            "description": "The request correlation ID.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "input",
          "description": "The input.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStubForRequestInputDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK, with the generated stub",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullStubDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/scenarios": {
      "get": {
        "tags": ["Scenario"],
        "summary": "Gets all scenarios.",
        "operationId": "Scenario_GetAllScenarioStates",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK, with all scenarios.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScenarioStateDto"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Scenario"],
        "summary": "Deletes all scenarios.",
        "operationId": "Scenario_DeleteAllScenarios",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No content."
          }
        }
      }
    },
    "/ph-api/scenarios/{scenario}": {
      "get": {
        "tags": ["Scenario"],
        "summary": "Gets a specific scenario.",
        "operationId": "Scenario_GetScenario",
        "parameters": [
          {
            "name": "scenario",
            "in": "path",
            "required": true,
            "description": "The scenario name.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "login_scenario"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The ScenarioStateDto.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioStateDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Scenario"],
        "summary": "Sets the scenario state to a new value.",
        "operationId": "Scenario_SetScenario",
        "parameters": [
          {
            "name": "scenario",
            "in": "path",
            "required": true,
            "description": "The scenario name.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "login_scenario"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "scenarioState",
          "description": "The new scenario state.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioStateInputDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No content."
          }
        }
      },
      "delete": {
        "tags": ["Scenario"],
        "summary": "Deletes / clears a scenario.",
        "operationId": "Scenario_DeleteScenario",
        "parameters": [
          {
            "name": "scenario",
            "in": "path",
            "required": true,
            "description": "The scenario name.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "login_scenario"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No content."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/scheduledJob/{jobName}": {
      "post": {
        "tags": ["ScheduledJob"],
        "summary": "Runs a specified scheduled job.",
        "operationId": "ScheduledJob_RunScheduledJob",
        "parameters": [
          {
            "name": "jobName",
            "in": "path",
            "required": true,
            "description": "The name of the scheduled job to run.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "backup_job"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/ph-api/scheduledJob": {
      "get": {
        "tags": ["ScheduledJob"],
        "summary": "An endpoint for retrieving all the scheduled job names that can can be executed.",
        "operationId": "ScheduledJob_GetScheduledJobNames",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "A list of scheduled job names.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/stubs": {
      "post": {
        "tags": ["Stub"],
        "summary": "Adds a new stub.",
        "operationId": "Stub_Add",
        "requestBody": {
          "x-name": "stub",
          "description": "The posted stub.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StubDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "OK, with the created stub.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullStubDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Stub"],
        "summary": "Get all stubs.",
        "operationId": "Stub_GetAll",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "All stubs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullStubDto"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Stub"],
        "summary": "Delete ALL stubs. Be careful.",
        "operationId": "Stub_DeleteAll",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "OK, but not content"
          }
        }
      }
    },

    "/ph-api/stubs/{stubId}": {
      "put": {
        "tags": ["Stub"],
        "summary": "Updates a given stub.",
        "operationId": "Stub_Update",
        "parameters": [
          {
            "name": "stubId",
            "in": "path",
            "required": true,
            "description": "The stub ID.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "12345"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "stub",
          "description": "The posted stub.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StubDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "OK, but no content returned."
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Stub"],
        "summary": "Get a specific stub by stub identifier.",
        "operationId": "Stub_Get",
        "parameters": [
          {
            "name": "stubId",
            "in": "path",
            "required": true,
            "description": "The stub ID.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "12345"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The stub.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullStubDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Stub"],
        "summary": "Delete a specific stub by stub identifier.",
        "operationId": "Stub_Delete",
        "parameters": [
          {
            "name": "stubId",
            "in": "path",
            "required": true,
            "description": "The stub ID.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "12345"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "OK, but not content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/stubs/overview": {
      "get": {
        "tags": ["Stub"],
        "summary": "Get stub overview.",
        "operationId": "Stub_GetOverview",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "All stubs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullStubOverviewDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/stubs/{stubId}/requests": {
      "get": {
        "tags": ["Stub"],
        "summary": "Get requests for the given stub ID.",
        "operationId": "Stub_GetRequestsByStubId",
        "parameters": [
          {
            "name": "stubId",
            "in": "path",
            "required": true,
            "description": "The stub ID.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "12345"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "request results for the given stubId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestResultDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/tenants": {
      "get": {
        "tags": ["Tenant"],
        "summary": "Gets all available tenant names.",
        "operationId": "Tenant_GetTenantNames",
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "All available tenant names.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/tenants/{tenant}/stubs": {
      "get": {
        "tags": ["Tenant"],
        "summary": "Gets all stubs in a specific tenant.",
        "operationId": "Tenant_GetAll",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "The tenant.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "acme"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "All stubs in the tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullStubDto"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tenant"],
        "summary": "Deletes all stubs in a specific tenant.",
        "operationId": "Tenant_DeleteAll",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "The tenant.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "acme"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "OK, but no content"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tenant"],
        "summary": "Updates the stubs in a specific tenant with the posted values.\nIf a stub that is currently available in a tenant isn't sent in the request, it will be deleted.",
        "operationId": "Tenant_UpdateAll",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "The tenant.",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "acme"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "stubs",
          "description": "The stubs to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StubDto"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "OK, but no content"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ph-api/users/{username}": {
      "get": {
        "tags": ["User"],
        "summary": "Get the user for the given username.",
        "operationId": "User_Get",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "The username.",
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 20,
              "pattern": "^[a-zA-Z0-9_]+$",
              "example": "john_doe"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "ConfigurationDto": {
        "type": "object",
        "description": "A class for storing the data of a configuration item.\n            ",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "description": "Gets or sets the configuration item key.\n            ",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "Gets or sets the configuration item path.\n            ",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the configuration item description.\n            ",
            "nullable": true
          },
          "configKeyType": {
            "description": "Gets or sets the type of the config key.\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfigKeyType"
              }
            ]
          },
          "value": {
            "type": "string",
            "description": "Gets or sets the value.\n            ",
            "nullable": true
          }
        }
      },
      "ConfigKeyType": {
        "type": "string",
        "description": "Enum for specifying the config key type.\n            ",
        "x-enumNames": [
          "Authentication",
          "Web",
          "Storage",
          "Gui",
          "Stub",
          "Configuration",
          "Development"
        ],
        "enum": [
          "Authentication",
          "Web",
          "Storage",
          "Gui",
          "Stub",
          "Configuration",
          "Development"
        ]
      },
      "UpdateConfigurationValueInputDto": {
        "type": "object",
        "description": "A class used for performing a runtime update on a configuration value\n            ",
        "additionalProperties": false,
        "properties": {
          "configurationKey": {
            "type": "string",
            "description": "The configuration key.\n            ",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "description": "The new configuration value.\n            ",
            "nullable": true
          }
        }
      },
      "RequestExportResultDto": {
        "type": "object",
        "description": "A class which\n            ",
        "additionalProperties": false,
        "properties": {
          "requestExportType": {
            "description": "Gets or sets the request export type.\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RequestExportType"
              }
            ]
          },
          "result": {
            "type": "string",
            "description": "Gets or sets the result.\n            ",
            "nullable": true
          }
        }
      },
      "RequestExportType": {
        "type": "string",
        "description": "An enum to determine the export type of the request.\n            ",
        "x-enumNames": ["NotSet", "Curl", "Hurl", "Har"],
        "enum": ["NotSet", "Curl", "Hurl", "Har"]
      },
      "FullStubDto": {
        "type": "object",
        "description": "A class for storing a stub with its metadata.\n            ",
        "additionalProperties": false,
        "properties": {
          "stub": {
            "description": "Gets or sets the stub.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StubDto"
              }
            ]
          },
          "metadata": {
            "description": "Gets or sets the metadata.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StubMetadataDto"
              }
            ]
          }
        }
      },
      "StubDto": {
        "type": "object",
        "description": "A model for storing all information about a stub.\n            ",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.\n            ",
            "nullable": true
          },
          "conditions": {
            "description": "Gets or sets the conditions.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StubConditionsDto"
              }
            ]
          },
          "response": {
            "description": "Gets or sets the response.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StubResponseDto"
              }
            ]
          },
          "priority": {
            "type": "integer",
            "description": "Gets or sets the priority.\n            ",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "description": "Gets or sets whether this stub is enabled or not.\n            "
          }
        }
      },
      "StubConditionsDto": {
        "type": "object",
        "description": "A model for storing all conditions for a stub.\n            ",
        "additionalProperties": false,
        "properties": {
          "url": {
            "description": "Gets or sets the URL.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StubUrlConditionDto"
              }
            ]
          }
        }
      },
      "StubUrlConditionDto": {
        "type": "object",
        "description": "A model for storing information about the URL condition checkers.\n            ",
        "additionalProperties": false,
        "properties": {
          "path": {
            "description": "Gets or sets the path.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "title": "String",
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StubConditionStringCheckingDto"
              }
            ]
          },
          "query": {
            "type": "object",
            "description": "Gets or sets the query.\n            ",
            "nullable": true,
            "additionalProperties": {
              "oneOf": [
                {
                  "title": "String",
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/StubConditionStringCheckingDto"
                }
              ]
            }
          },
          "fullPath": {
            "description": "Gets or sets the full path.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "title": "String",
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StubConditionStringCheckingDto"
              }
            ]
          },
          "isHttps": {
            "type": "boolean",
            "description": "Gets or sets the is HTTPS.\n            ",
            "nullable": true
          }
        }
      },
      "StubFormDto": {
        "type": "object",
        "description": "A model for storing data for the form condition checker.\n            ",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "description": "Gets or sets the key.\n            ",
            "nullable": true
          },
          "value": {
            "description": "Gets or sets the value.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "title": "String",
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StubConditionStringCheckingDto"
              }
            ]
          }
        }
      },
      "StubXpathDto": {
        "type": "object",
        "description": "A model for storing information about the XPath condition checker.\n            ",
        "additionalProperties": false,
        "properties": {
          "queryString": {
            "type": "string",
            "description": "Gets or sets the query string.\n            ",
            "nullable": true
          },
          "namespaces": {
            "type": "object",
            "description": "Gets or sets the namespaces.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "StubBasicAuthenticationDto": {
        "type": "object",
        "description": "A model for storing stub information for the basic authentication condition checker.\n            ",
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string",
            "description": "Gets or sets the username.\n            ",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Gets or sets the password.\n            ",
            "nullable": true
          }
        }
      },
      "StubConditionScenarioDto": {
        "type": "object",
        "description": "A model for storing all scenario conditions for a stub\n            ",
        "additionalProperties": false,
        "properties": {
          "minHits": {
            "type": "integer",
            "description": "Gets or sets the inclusive min hit count.\n            ",
            "format": "int32",
            "nullable": true
          },
          "maxHits": {
            "type": "integer",
            "description": "Gets or sets the exclusive max hit count.\n            ",
            "format": "int32",
            "nullable": true
          },
          "exactHits": {
            "type": "integer",
            "description": "Gets or sets the exact hits count.\n            ",
            "format": "int32",
            "nullable": true
          },
          "scenarioState": {
            "type": "string",
            "description": "Gets or sets the state the scenario should be in.\n            ",
            "nullable": true
          }
        }
      },
      "StubResponseDto": {
        "type": "object",
        "description": "A model for storing all possible response parameters for a stub.\n            ",
        "additionalProperties": false,
        "properties": {
          "reverseProxy": {
            "description": "Gets or sets the reverse proxy settings.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StubResponseReverseProxyDto"
              }
            ]
          }
        }
      },
      "StubResponseReverseProxyDto": {
        "type": "object",
        "description": "A model for storing reverse proxy settings.\n            ",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "Gets or sets the URL where the request should be sent to. The request will be sent to exactly this URL.\n            ",
            "nullable": true
          },
          "appendQueryString": {
            "type": "boolean",
            "description": "Gets or sets whether the query string of the request to HttPlaceholder should be appended to the string that will\nbe send to the proxy URL.\n            ",
            "nullable": true
          },
          "appendPath": {
            "type": "boolean",
            "description": "Gets or sets whether the path string of the request to HttPlaceholder should be appended to the string that will be\nsend to the proxy URL.\n            ",
            "nullable": true
          },
          "replaceRootUrl": {
            "type": "boolean",
            "description": "Gets or sets whether the root URL of the response of the target web service should be replaced with the root URL of\nHttPlaceholder.\n            ",
            "nullable": true
          }
        }
      },
      "LineEndingType": {
        "type": "string",
        "description": "Specifies the line ending type for a response.\n            ",
        "x-enumNames": ["NotSet", "Windows", "Unix"],
        "enum": ["NotSet", "Windows", "Unix"]
      },
      "StubResponseImageDto": {
        "type": "object",
        "description": "A model for storing settings about the stub image that should be generated.\n            ",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "Gets or sets the image type. Possibilities: jpeg, png, bmp and gif.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResponseImageType"
              }
            ]
          },
          "width": {
            "type": "integer",
            "description": "Gets or sets the image width in pixels.\n            ",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Gets or sets the image height in pixels.\n            ",
            "format": "int32"
          },
          "backgroundColor": {
            "type": "string",
            "description": "Gets or sets the background color in HEX.\n            ",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Gets or sets the text that should be drawn in the image.\n            ",
            "nullable": true
          },
          "fontSize": {
            "type": "integer",
            "description": "Gets or sets the fontsize for the text in the image.\n            ",
            "format": "int32"
          },
          "fontColor": {
            "type": "string",
            "description": "Gets or sets the font color.\n            ",
            "nullable": true
          },
          "jpegQuality": {
            "type": "integer",
            "description": "Gets or sets the image quality in the case of JPEG image.\n            ",
            "format": "int32"
          },
          "wordWrap": {
            "type": "boolean",
            "description": "Gets or sets whether the text should be wrapped across the image or not.\n            "
          }
        }
      },
      "ResponseImageType": {
        "type": "string",
        "description": "An enum for specifying the type of image to return for the stub image.\n            ",
        "x-enumNames": ["NotSet", "Jpeg", "Bmp", "Png", "Gif"],
        "enum": ["NotSet", "Jpeg", "Bmp", "Png", "Gif"]
      },
      "StubResponseScenarioDto": {
        "type": "object",
        "description": "A model for storing all scenario conditions for a stub response.\n            ",
        "additionalProperties": false,
        "properties": {
          "setScenarioState": {
            "type": "string",
            "description": "Gets or sets the scenario state the scenario should be set to after the stub is hit.\n            ",
            "nullable": true
          },
          "clearState": {
            "type": "boolean",
            "description": "Gets or sets a value which indicates if the state (scenario state and hit count) should be reset after the stub is\nhit.\n            ",
            "nullable": true
          }
        }
      },
      "StubResponseReplaceDto": {
        "type": "object",
        "description": "A model which contains the configuration needed to do a string or regex replace on the stub response.\n            ",
        "additionalProperties": false,
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to look for. Set either this or regex, not both.\n            ",
            "nullable": true
          },
          "ignoreCase": {
            "type": "boolean",
            "description": "Whether to ignore the casing when looking for Text.\n            ",
            "nullable": true
          },
          "regex": {
            "type": "string",
            "description": "The regex expression to look for. Set either this or text, not both.\n            ",
            "nullable": true
          },
          "jsonPath": {
            "type": "string",
            "description": "The JSONPath expression that should be looked for in the JSON.\n            ",
            "nullable": true
          },
          "replaceWith": {
            "type": "string",
            "description": "The value the found text or regex matches should be replaced with.\n            ",
            "nullable": true
          }
        }
      },
      "StubMetadataDto": {
        "type": "object",
        "description": "A model for storing metadata of a stub.\n            ",
        "additionalProperties": false,
        "properties": {
          "readOnly": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether [read only].\n            "
          },
          "filename": {
            "type": "string",
            "description": "Gets or sets the filename the stub is in\n            ",
            "nullable": true
          }
        }
      },
      "MetadataDto": {
        "type": "object",
        "description": "A model for storing the HttPlaceholder metadata.\n            ",
        "additionalProperties": false,
        "properties": {
          "version": {
            "type": "string",
            "description": "Gets or sets the version.\n            ",
            "nullable": true
          },
          "runtimeVersion": {
            "type": "string",
            "description": "Gets or sets the runtime version.\n            ",
            "nullable": true
          },
          "variableHandlers": {
            "type": "array",
            "description": "Gets or sets the available variable handlers.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/VariableHandlerDto"
            }
          }
        }
      },
      "VariableHandlerDto": {
        "type": "object",
        "description": "A model that is used for displaying what types of variable handlers are available.\n            ",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the variable handler.\n            ",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "Gets or sets the full name of the variable handler.\n            ",
            "nullable": true
          },
          "example": {
            "type": "string",
            "description": "Gets or sets a short instruction on how to use the variable handler.\n            ",
            "nullable": true
          },
          "examples": {
            "type": "array",
            "description": "Gets or sets one or more examples.\n            ",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description.\n            ",
            "nullable": true
          }
        }
      },
      "FeatureResultDto": {
        "type": "object",
        "description": "A class for storing whether a specific feature is enabled or not.\n            ",
        "additionalProperties": false,
        "properties": {
          "featureFlag": {
            "description": "Gets or sets the checked feature.\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FeatureFlagType"
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "Gets or sets whether the feature is enabled or not.\n            "
          }
        }
      },
      "FeatureFlagType": {
        "type": "string",
        "description": "An enum for specifying / verifying whether specific features are enabled or disabled.\n            ",
        "x-enumNames": ["Authentication"],
        "enum": ["Authentication"]
      },
      "RequestResultDto": {
        "type": "object",
        "description": "A model for storing a request.\n            ",
        "additionalProperties": false,
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Gets or sets the correlation identifier.\n            ",
            "nullable": true
          },
          "requestParameters": {
            "description": "Gets or sets the request parameters.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RequestParametersDto"
              }
            ]
          },
          "stubExecutionResults": {
            "type": "array",
            "description": "Gets or sets the stub execution results.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StubExecutionResultDto"
            }
          },
          "stubResponseWriterResults": {
            "type": "array",
            "description": "Gets or sets the stub response writer results.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/StubResponseWriterResultDto"
            }
          },
          "executingStubId": {
            "type": "string",
            "description": "Gets or sets the executing stub identifier.\n            ",
            "nullable": true
          },
          "stubTenant": {
            "type": "string",
            "description": "Gets or sets the tenant name of the stub.\n            ",
            "nullable": true
          },
          "requestBeginTime": {
            "type": "string",
            "description": "Gets or sets the request begin time.\n            ",
            "format": "date-time"
          },
          "requestEndTime": {
            "type": "string",
            "description": "Gets or sets the request end time.\n            ",
            "format": "date-time"
          },
          "hasResponse": {
            "type": "boolean",
            "description": "Gets or sets whether a response is saved for this request.\n            "
          }
        }
      },
      "RequestParametersDto": {
        "type": "object",
        "description": "A model for storing the request data for a request.\n            ",
        "additionalProperties": false,
        "properties": {
          "method": {
            "type": "string",
            "description": "Gets or sets the method.\n            ",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "Gets or sets the URL.\n            ",
            "nullable": true
          },
          "body": {
            "type": "string",
            "description": "Gets or sets the body.\n            ",
            "nullable": true
          },
          "bodyIsBinary": {
            "type": "boolean",
            "description": "Gets or sets whether the request body is binary.\n            "
          },
          "headers": {
            "type": "object",
            "description": "Gets or sets the headers.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "clientIp": {
            "type": "string",
            "description": "Gets or sets the client ip.\n            ",
            "nullable": true
          }
        }
      },
      "StubExecutionResultDto": {
        "type": "object",
        "description": "A model for storing all execution related data for a given stub.\n            ",
        "additionalProperties": false,
        "properties": {
          "stubId": {
            "type": "string",
            "description": "Gets or sets the stub identifier.\n            ",
            "nullable": true
          },
          "passed": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this StubExecutionResultDto is passed.\n            "
          },
          "conditions": {
            "type": "array",
            "description": "Gets or sets the conditions.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ConditionCheckResultDto"
            }
          }
        }
      },
      "ConditionCheckResultDto": {
        "type": "object",
        "description": "A model for storing a condition check result.\n            ",
        "additionalProperties": false,
        "properties": {
          "checkerName": {
            "type": "string",
            "description": "Gets or sets the name of the checker.\n            ",
            "nullable": true
          },
          "conditionValidation": {
            "type": "string",
            "description": "Gets or sets the condition validation.\n            ",
            "nullable": true
          },
          "log": {
            "type": "string",
            "description": "Gets or sets the log.\n            ",
            "nullable": true
          }
        }
      },
      "StubResponseWriterResultDto": {
        "type": "object",
        "description": "A model for storing the execution result of a specific response writer.\n            ",
        "additionalProperties": false,
        "properties": {
          "responseWriterName": {
            "type": "string",
            "description": "Gets or sets the name of the response writer.\n            ",
            "nullable": true
          },
          "executed": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this StubResponseWriterResultDto is executed.\n            "
          },
          "log": {
            "type": "string",
            "description": "Gets or sets the log string of the executed response writer.\n            ",
            "nullable": true
          }
        }
      },
      "RequestOverviewDto": {
        "type": "object",
        "description": "A model for storing the base properties of a request.\n            ",
        "additionalProperties": false,
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Gets or sets the correlation identifier.\n            ",
            "nullable": true
          },
          "method": {
            "type": "string",
            "description": "Gets or sets the method.\n            ",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "Gets or sets the URL.\n            ",
            "nullable": true
          },
          "executingStubId": {
            "type": "string",
            "description": "Gets or sets the executing stub identifier.\n            ",
            "nullable": true
          },
          "stubTenant": {
            "type": "string",
            "description": "Gets or sets the tenant name of the stub.\n            ",
            "nullable": true
          },
          "requestBeginTime": {
            "type": "string",
            "description": "Gets or sets the request begin time.\n            ",
            "format": "date-time"
          },
          "requestEndTime": {
            "type": "string",
            "description": "Gets or sets the request end time.\n            ",
            "format": "date-time"
          },
          "hasResponse": {
            "type": "boolean",
            "description": "Gets or sets whether a response is saved for this request.\n            "
          }
        }
      },
      "ResponseDto": {
        "type": "object",
        "description": "A model for storing the response a stub should return.\n            ",
        "additionalProperties": false,
        "properties": {
          "statusCode": {
            "type": "integer",
            "description": "Gets or sets the status code.\n            ",
            "format": "int32"
          },
          "body": {
            "type": "string",
            "description": "Gets or sets the body.\n            ",
            "format": "byte",
            "nullable": true
          },
          "bodyIsBinary": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the returned body is binary.\n            "
          },
          "headers": {
            "type": "object",
            "description": "Gets or sets the headers.\n            ",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CreateStubForRequestInputDto": {
        "type": "object",
        "description": "A model which contains metadata which is used when creating a stub from a request.\n            ",
        "additionalProperties": false,
        "properties": {
          "doNotCreateStub": {
            "type": "boolean",
            "description": "Gets or sets whether to add the stub to the data source. If set to false, the stub is only returned but not added.\n            "
          }
        }
      },
      "ScenarioStateDto": {
        "type": "object",
        "description": "Represents the state of a specific scenario.\n            ",
        "additionalProperties": false,
        "properties": {
          "scenario": {
            "type": "string",
            "description": "Gets or sets the scenario name.\n            ",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "Gets or sets the state the scenario is in.\n            ",
            "nullable": true
          },
          "hitCount": {
            "type": "integer",
            "description": "Gets or sets the number of times the scenario has been hit.\n            ",
            "format": "int32"
          }
        }
      },
      "ScenarioStateInputDto": {
        "type": "object",
        "description": "A model that is used to set the scenario.\n            ",
        "additionalProperties": false,
        "properties": {
          "state": {
            "type": "string",
            "description": "Gets or sets the state the scenario is in.\n            ",
            "nullable": true
          },
          "hitCount": {
            "type": "integer",
            "description": "Gets or sets the number of times the scenario has been hit.\n            ",
            "format": "int32"
          }
        }
      },
      "FullStubOverviewDto": {
        "type": "object",
        "description": "A class for storing a stripped down version of a stub with metadata.\n            ",
        "additionalProperties": false,
        "properties": {
          "stub": {
            "description": "Gets or sets the stub.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StubOverviewDto"
              }
            ]
          },
          "metadata": {
            "description": "Gets or sets the metadata.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/StubMetadataDto"
              }
            ]
          }
        }
      },
      "StubOverviewDto": {
        "type": "object",
        "description": "A class for storing a stripped down version of a stub.\n            ",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.\n            ",
            "nullable": true
          },
          "tenant": {
            "type": "string",
            "description": "Gets or sets the tenant.\n            ",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Gets or sets whether the stub is enabled or not.\n            "
          }
        }
      },
      "UserDto": {
        "type": "object",
        "description": "A model for storing information about a user.\n            ",
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string",
            "description": "Gets or sets the username.\n            ",
            "nullable": true
          }
        }
      },
      "String[]": {
        "title": "String[]",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "StubConditionStringCheckingDto": {
        "title": "StubConditionStringCheckingDto",
        "type": "object",
        "description": "A model that contains several keywords for handling string checking.\n            ",
        "additionalProperties": false,
        "properties": {
          "StringEquals": {
            "type": "string",
            "description": "Gets or sets the equals check.\n            "
          },
          "StringEqualsCi": {
            "type": "string",
            "description": "Gets or sets the non case sensitive equals check.\n            "
          },
          "StringNotEquals": {
            "type": "string",
            "description": "Gets or sets the notequals check.\n            "
          },
          "StringNotEqualsCi": {
            "type": "string",
            "description": "Gets or sets the non case sensitive notequals check.\n            "
          },
          "Contains": {
            "type": "string",
            "description": "Gets or sets the contains check.\n            "
          },
          "ContainsCi": {
            "type": "string",
            "description": "Gets or sets the non case sensitive contains check.\n            "
          },
          "NotContains": {
            "type": "string",
            "description": "Gets or sets the not contains check.\n            "
          },
          "NotContainsCi": {
            "type": "string",
            "description": "Gets or sets the non case sensitive not contains check.\n            "
          },
          "StartsWith": {
            "type": "string",
            "description": "Gets or sets the startswith check.\n            "
          },
          "StartsWithCi": {
            "type": "string",
            "description": "Gets or sets the non case sensitive startswith check.\n            "
          },
          "DoesNotStartWith": {
            "type": "string",
            "description": "Gets or sets the doesnotstartwith check.\n            "
          },
          "DoesNotStartWithCi": {
            "type": "string",
            "description": "Gets or sets the non case sensitive doesnotstartwith check.\n            "
          },
          "EndsWith": {
            "type": "string",
            "description": "Gets or sets the endswith check.\n            "
          },
          "EndsWithCi": {
            "type": "string",
            "description": "Gets or sets the non case sensitive endswith check.\n            "
          },
          "DoesNotEndWith": {
            "type": "string",
            "description": "Gets or sets the doesnotendwith check.\n            "
          },
          "DoesNotEndWithCi": {
            "type": "string",
            "description": "Gets or sets the non case sensitive doesnotstartwith check.\n            "
          },
          "Regex": {
            "type": "string",
            "description": "Gets or sets the regex check.\n            "
          },
          "RegexNoMatches": {
            "type": "string",
            "description": "Gets or sets the regexnomatches check.\n            "
          },
          "Present": {
            "type": "boolean",
            "description": "Gets or sets the present check.\n            "
          },
          "MinLength": {
            "type": "integer",
            "description": "Gets or sets the min length check.\n            ",
            "format": "int32"
          },
          "MaxLength": {
            "type": "integer",
            "description": "Gets or sets the max length check.\n            ",
            "format": "int32"
          },
          "ExactLength": {
            "type": "integer",
            "description": "Gets or sets the exact length check.\n            ",
            "format": "int32"
          }
        }
      },
      "StubJsonPathDto": {
        "title": "StubJsonPathDto",
        "type": "object",
        "description": "A model for storing data for the JSONPath condition checker.\n            ",
        "additionalProperties": false,
        "properties": {
          "Query": {
            "type": "string",
            "description": "Gets or sets the JSONPath query.\n            "
          },
          "ExpectedValue": {
            "type": "string",
            "description": "Gets or sets the expected value.\n            "
          }
        }
      },
      "StubExtraDurationDto": {
        "title": "StubExtraDurationDto",
        "type": "object",
        "description": "A model for storing \"extra duration\" metadata.\n            ",
        "additionalProperties": false,
        "properties": {
          "Min": {
            "type": "integer",
            "description": "Gets or sets the minimum duration.\n            ",
            "format": "int32"
          },
          "Max": {
            "type": "integer",
            "description": "Gets or sets the maximum duration.\n            ",
            "format": "int32"
          }
        }
      }
    }
  }
}
