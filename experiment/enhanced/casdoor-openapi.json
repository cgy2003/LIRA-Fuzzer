{
  "components": {
    "requestBodies": {
      "object": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object"
            }
          }
        },
        "description": "The enforcer object",
        "required": true
      },
      "object.Adapter": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Adapter"
            }
          }
        },
        "description": "The details of the adapter",
        "required": true
      },
      "object.Application": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Application"
            }
          }
        },
        "description": "The details of the application",
        "required": true
      },
      "object.Cert": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Cert"
            }
          }
        },
        "description": "The details of the cert",
        "required": true
      },
      "object.Group": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Group"
            }
          }
        },
        "description": "The details of the group",
        "required": true
      },
      "object.Invitation": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Invitation"
            }
          }
        },
        "description": "The details of the invitation",
        "required": true
      },
      "object.Ldap": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Ldap"
            }
          }
        },
        "description": "The details of the ldap",
        "required": true
      },
      "object.Model": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Model"
            }
          }
        },
        "description": "The details of the model",
        "required": true
      },
      "object.Organization": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Organization"
            }
          }
        },
        "description": "The details of the organization",
        "required": true
      },
      "object.Payment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Payment"
            }
          }
        },
        "description": "The details of the payment",
        "required": true
      },
      "object.Permission": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Permission"
            }
          }
        },
        "description": "The details of the permission",
        "required": true
      },
      "object.Plan": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Plan"
            }
          }
        },
        "description": "The details of the plan",
        "required": true
      },
      "object.Pricing": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Pricing"
            }
          }
        },
        "description": "The details of the pricing",
        "required": true
      },
      "object.Product": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Product"
            }
          }
        },
        "description": "The details of the product",
        "required": true
      },
      "object.Provider": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Provider"
            }
          }
        },
        "description": "The details of the provider",
        "required": true
      },
      "object.Resource": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Resource"
            }
          }
        },
        "description": "Resource object",
        "required": true
      },
      "object.Role": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Role"
            }
          }
        },
        "description": "The details of the role",
        "required": true
      },
      "object.Subscription": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Subscription"
            }
          }
        },
        "description": "The details of the subscription",
        "required": true
      },
      "object.Syncer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Syncer"
            }
          }
        },
        "description": "The details of the syncer",
        "required": true
      },
      "object.Token": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Token"
            }
          }
        },
        "description": "Details of the token",
        "required": true
      },
      "object.User": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.User"
            }
          }
        },
        "description": "The details of the user",
        "required": true
      },
      "object.Webhook": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/object.Webhook"
            }
          }
        },
        "description": "The details of the webhook",
        "required": true
      }
    },
    "schemas": {
      "casbin.Enforcer": {
        "title": "Enforcer",
        "type": "object"
      },
      "controllers.AuthForm": {
        "title": "AuthForm",
        "type": "object"
      },
      "controllers.EmailForm": {
        "properties": {
          "content": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "receivers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sender": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "title": "EmailForm",
        "type": "object"
      },
      "controllers.LaravelResponse": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "email_verified_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "title": "LaravelResponse",
        "type": "object"
      },
      "controllers.LdapResp": {
        "properties": {
          "existUuids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/object.LdapUser"
            },
            "type": "array"
          }
        },
        "title": "LdapResp",
        "type": "object"
      },
      "controllers.LdapSyncResp": {
        "properties": {
          "exist": {
            "items": {
              "$ref": "#/components/schemas/object.LdapUser"
            },
            "type": "array"
          },
          "failed": {
            "items": {
              "$ref": "#/components/schemas/object.LdapUser"
            },
            "type": "array"
          }
        },
        "title": "LdapSyncResp",
        "type": "object"
      },
      "controllers.NotificationForm": {
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "title": "NotificationForm",
        "type": "object"
      },
      "controllers.Response": {
        "properties": {
          "data": {
            "additionalProperties": {
              "description": "support string, struct or []struct",
              "type": "string"
            }
          },
          "data2": {
            "additionalProperties": {
              "description": "support string, struct or []struct",
              "type": "string"
            }
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "sub": {
            "type": "string"
          }
        },
        "title": "Response",
        "type": "object"
      },
      "controllers.SmsForm": {
        "properties": {
          "content": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "receivers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "SmsForm",
        "type": "object"
      },
      "jose.JSONWebKey": {
        "title": "JSONWebKey",
        "type": "object"
      },
      "model.Model": {
        "title": "Model",
        "type": "object"
      },
      "object": {
        "title": "object",
        "type": "object"
      },
      "object.AccountItem": {
        "properties": {
          "modifyRule": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "viewRule": {
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          }
        },
        "title": "AccountItem",
        "type": "object"
      },
      "object.Adapter": {
        "properties": {
          "createdTime": {
            "type": "string"
          },
          "database": {
            "type": "string"
          },
          "databaseType": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "format": "int64",
            "type": "integer"
          },
          "table": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "useSameDb": {
            "type": "boolean"
          },
          "user": {
            "type": "string"
          }
        },
        "title": "Adapter",
        "type": "object"
      },
      "object.Application": {
        "properties": {
          "affiliationUrl": {
            "type": "string"
          },
          "cert": {
            "type": "string"
          },
          "certPublicKey": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "enableAutoSignin": {
            "type": "boolean"
          },
          "enableCodeSignin": {
            "type": "boolean"
          },
          "enableLinkWithEmail": {
            "type": "boolean"
          },
          "enablePassword": {
            "type": "boolean"
          },
          "enableSamlC14n10": {
            "type": "boolean"
          },
          "enableSamlCompress": {
            "type": "boolean"
          },
          "enableSamlPostBinding": {
            "type": "boolean"
          },
          "enableSignUp": {
            "type": "boolean"
          },
          "enableSigninSession": {
            "type": "boolean"
          },
          "enableWebAuthn": {
            "type": "boolean"
          },
          "expireInHours": {
            "format": "int64",
            "type": "integer"
          },
          "failedSigninFrozenTime": {
            "format": "int64",
            "type": "integer"
          },
          "failedSigninLimit": {
            "format": "int64",
            "type": "integer"
          },
          "forgetUrl": {
            "type": "string"
          },
          "formBackgroundUrl": {
            "type": "string"
          },
          "formCss": {
            "type": "string"
          },
          "formCssMobile": {
            "type": "string"
          },
          "formOffset": {
            "format": "int64",
            "type": "integer"
          },
          "formSideHtml": {
            "type": "string"
          },
          "grantTypes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "homepageUrl": {
            "type": "string"
          },
          "invitationCodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "orgChoiceMode": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "organizationObj": {
            "$ref": "#/components/schemas/object.Organization"
          },
          "owner": {
            "type": "string"
          },
          "providers": {
            "items": {
              "$ref": "#/components/schemas/object.ProviderItem"
            },
            "type": "array"
          },
          "redirectUris": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "refreshExpireInHours": {
            "format": "int64",
            "type": "integer"
          },
          "samlAttributes": {
            "items": {
              "$ref": "#/components/schemas/object.SamlItem"
            },
            "type": "array"
          },
          "samlReplyUrl": {
            "type": "string"
          },
          "signinHtml": {
            "type": "string"
          },
          "signinMethods": {
            "items": {
              "$ref": "#/components/schemas/object.SigninMethod"
            },
            "type": "array"
          },
          "signinUrl": {
            "type": "string"
          },
          "signupHtml": {
            "type": "string"
          },
          "signupItems": {
            "items": {
              "$ref": "#/components/schemas/object.SignupItem"
            },
            "type": "array"
          },
          "signupUrl": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "termsOfUse": {
            "type": "string"
          },
          "themeData": {
            "$ref": "#/components/schemas/object.ThemeData"
          },
          "tokenFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tokenFormat": {
            "type": "string"
          }
        },
        "title": "Application",
        "type": "object"
      },
      "object.Cert": {
        "properties": {
          "bitSize": {
            "format": "int64",
            "type": "integer"
          },
          "certificate": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "cryptoAlgorithm": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "expireInYears": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "privateKey": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "title": "Cert",
        "type": "object"
      },
      "object.Enforcer": {
        "properties": {
          "adapter": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "modelCfg": {
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "updatedTime": {
            "type": "string"
          }
        },
        "title": "Enforcer",
        "type": "object"
      },
      "object.GaugeVecInfo": {
        "properties": {
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "throughput": {
            "format": "double",
            "type": "number"
          }
        },
        "title": "GaugeVecInfo",
        "type": "object"
      },
      "object.Group": {
        "properties": {
          "children": {
            "items": {
              "$ref": "#/components/schemas/object.Group"
            },
            "type": "array"
          },
          "contactEmail": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "isTopGroup": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "manager": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updatedTime": {
            "type": "string"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/object.User"
            },
            "type": "array"
          }
        },
        "title": "Group",
        "type": "object"
      },
      "object.Header": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "title": "Header",
        "type": "object"
      },
      "object.HistogramVecInfo": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "latency": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "title": "HistogramVecInfo",
        "type": "object"
      },
      "object.IntrospectionResponse": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "aud": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client_id": {
            "type": "string"
          },
          "exp": {
            "format": "int64",
            "type": "integer"
          },
          "iat": {
            "format": "int64",
            "type": "integer"
          },
          "iss": {
            "type": "string"
          },
          "jti": {
            "type": "string"
          },
          "nbf": {
            "format": "int64",
            "type": "integer"
          },
          "scope": {
            "type": "string"
          },
          "sub": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "title": "IntrospectionResponse",
        "type": "object"
      },
      "object.Invitation": {
        "properties": {
          "application": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "quota": {
            "format": "int64",
            "type": "integer"
          },
          "signupGroup": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "updatedTime": {
            "type": "string"
          },
          "usedCount": {
            "format": "int64",
            "type": "integer"
          },
          "username": {
            "type": "string"
          }
        },
        "title": "Invitation",
        "type": "object"
      },
      "object.Ldap": {
        "properties": {
          "autoSync": {
            "format": "int64",
            "type": "integer"
          },
          "baseDn": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "enableSsl": {
            "type": "boolean"
          },
          "filter": {
            "type": "string"
          },
          "filterFields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastSync": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "format": "int64",
            "type": "integer"
          },
          "serverName": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "title": "Ldap",
        "type": "object"
      },
      "object.LdapUser": {
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "Mail": {
            "type": "string"
          },
          "MobileTelephoneNumber": {
            "type": "string"
          },
          "PostalAddress": {
            "type": "string"
          },
          "RegisteredAddress": {
            "type": "string"
          },
          "TelephoneNumber": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "cn": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "gidNumber": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "memberOf": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "uidNumber": {
            "type": "string"
          },
          "userPrincipalName": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "title": "LdapUser",
        "type": "object"
      },
      "object.ManagedAccount": {
        "properties": {
          "application": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "signinUrl": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "title": "ManagedAccount",
        "type": "object"
      },
      "object.MfaItem": {
        "properties": {
          "name": {
            "type": "string"
          },
          "rule": {
            "type": "string"
          }
        },
        "title": "MfaItem",
        "type": "object"
      },
      "object.MfaProps": {
        "properties": {
          "countryCode": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "isPreferred": {
            "type": "boolean"
          },
          "mfaType": {
            "type": "string"
          },
          "recoveryCodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secret": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "title": "MfaProps",
        "type": "object"
      },
      "object.Model": {
        "properties": {
          "createdTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "modelText": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          }
        },
        "title": "Model",
        "type": "object"
      },
      "object.OidcDiscovery": {
        "properties": {
          "authorization_endpoint": {
            "type": "string"
          },
          "claims_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "end_session_endpoint": {
            "type": "string"
          },
          "grant_types_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id_token_signing_alg_values_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "introspection_endpoint": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "jwks_uri": {
            "type": "string"
          },
          "request_object_signing_alg_values_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "request_parameter_supported": {
            "type": "boolean"
          },
          "response_modes_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "response_types_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scopes_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subject_types_supported": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token_endpoint": {
            "type": "string"
          },
          "userinfo_endpoint": {
            "type": "string"
          }
        },
        "title": "OidcDiscovery",
        "type": "object"
      },
      "object.Organization": {
        "properties": {
          "accountItems": {
            "items": {
              "$ref": "#/components/schemas/object.AccountItem"
            },
            "type": "array"
          },
          "countryCodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdTime": {
            "type": "string"
          },
          "defaultApplication": {
            "type": "string"
          },
          "defaultAvatar": {
            "type": "string"
          },
          "defaultPassword": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "enableSoftDeletion": {
            "type": "boolean"
          },
          "favicon": {
            "type": "string"
          },
          "initScore": {
            "format": "int64",
            "type": "integer"
          },
          "isProfilePublic": {
            "type": "boolean"
          },
          "languages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "masterPassword": {
            "type": "string"
          },
          "masterVerificationCode": {
            "type": "string"
          },
          "mfaItems": {
            "items": {
              "$ref": "#/components/schemas/object.MfaItem"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "passwordOptions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "passwordSalt": {
            "type": "string"
          },
          "passwordType": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "themeData": {
            "$ref": "#/components/schemas/object.ThemeData"
          },
          "websiteUrl": {
            "type": "string"
          }
        },
        "title": "Organization",
        "type": "object"
      },
      "object.Ormer": {
        "properties": {
          "Engine": {
            "$ref": "#/components/schemas/xorm.Engine"
          },
          "dataSourceName": {
            "type": "string"
          },
          "dbName": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          }
        },
        "title": "Ormer",
        "type": "object"
      },
      "object.Payment": {
        "properties": {
          "createdTime": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "invoiceRemark": {
            "type": "string"
          },
          "invoiceTaxId": {
            "type": "string"
          },
          "invoiceTitle": {
            "type": "string"
          },
          "invoiceType": {
            "type": "string"
          },
          "invoiceUrl": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "outOrderId": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "payUrl": {
            "type": "string"
          },
          "personEmail": {
            "type": "string"
          },
          "personIdCard": {
            "type": "string"
          },
          "personName": {
            "type": "string"
          },
          "personPhone": {
            "type": "string"
          },
          "price": {
            "format": "double",
            "type": "number"
          },
          "productDisplayName": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "returnUrl": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/pp.PaymentState"
          },
          "successUrl": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "title": "Payment",
        "type": "object"
      },
      "object.Permission": {
        "properties": {
          "actions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "adapter": {
            "type": "string"
          },
          "approveTime": {
            "type": "string"
          },
          "approver": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "effect": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "model": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "state": {
            "type": "string"
          },
          "submitter": {
            "type": "string"
          },
          "users": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "Permission",
        "type": "object"
      },
      "object.Plan": {
        "properties": {
          "createdTime": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "owner": {
            "type": "string"
          },
          "paymentProviders": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "period": {
            "type": "string"
          },
          "price": {
            "format": "double",
            "type": "number"
          },
          "product": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "title": "Plan",
        "type": "object"
      },
      "object.Pricing": {
        "properties": {
          "application": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "plans": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trialDuration": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "Pricing",
        "type": "object"
      },
      "object.Product": {
        "properties": {
          "createdTime": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "price": {
            "format": "double",
            "type": "number"
          },
          "providerObjs": {
            "items": {
              "$ref": "#/components/schemas/object.Provider"
            },
            "type": "array"
          },
          "providers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "quantity": {
            "format": "int64",
            "type": "integer"
          },
          "returnUrl": {
            "type": "string"
          },
          "sold": {
            "format": "int64",
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        },
        "title": "Product",
        "type": "object"
      },
      "object.PrometheusInfo": {
        "properties": {
          "apiLatency": {
            "items": {
              "$ref": "#/components/schemas/object.HistogramVecInfo"
            },
            "type": "array"
          },
          "apiThroughput": {
            "items": {
              "$ref": "#/components/schemas/object.GaugeVecInfo"
            },
            "type": "array"
          },
          "totalThroughput": {
            "format": "double",
            "type": "number"
          }
        },
        "title": "PrometheusInfo",
        "type": "object"
      },
      "object.Provider": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "bucket": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "cert": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientId2": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "clientSecret2": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "customAuthUrl": {
            "type": "string"
          },
          "customLogo": {
            "type": "string"
          },
          "customTokenUrl": {
            "type": "string"
          },
          "customUserInfoUrl": {
            "type": "string"
          },
          "disableSsl": {
            "type": "boolean"
          },
          "displayName": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "enableSignAuthnRequest": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "idP": {
            "type": "string"
          },
          "intranetEndpoint": {
            "type": "string"
          },
          "issuerUrl": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "pathPrefix": {
            "type": "string"
          },
          "port": {
            "format": "int64",
            "type": "integer"
          },
          "providerUrl": {
            "type": "string"
          },
          "receiver": {
            "type": "string"
          },
          "regionId": {
            "type": "string"
          },
          "scopes": {
            "type": "string"
          },
          "signName": {
            "type": "string"
          },
          "subType": {
            "type": "string"
          },
          "templateCode": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "userMapping": {
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "title": "Provider",
        "type": "object"
      },
      "object.ProviderItem": {
        "properties": {
          "canSignIn": {
            "type": "boolean"
          },
          "canSignUp": {
            "type": "boolean"
          },
          "canUnlink": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "prompted": {
            "type": "boolean"
          },
          "provider": {
            "$ref": "#/components/schemas/object.Provider"
          },
          "rule": {
            "type": "string"
          },
          "signupGroup": {
            "type": "string"
          }
        },
        "title": "ProviderItem",
        "type": "object"
      },
      "object.Resource": {
        "properties": {
          "application": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fileFormat": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "fileSize": {
            "format": "int64",
            "type": "integer"
          },
          "fileType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "title": "Resource",
        "type": "object"
      },
      "object.Role": {
        "properties": {
          "createdTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "Role",
        "type": "object"
      },
      "object.SamlItem": {
        "properties": {
          "name": {
            "type": "string"
          },
          "nameFormat": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "title": "SamlItem",
        "type": "object"
      },
      "object.SigninMethod": {
        "properties": {
          "displayName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rule": {
            "type": "string"
          }
        },
        "title": "SigninMethod",
        "type": "object"
      },
      "object.SignupItem": {
        "properties": {
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "placeholder": {
            "type": "string"
          },
          "prompted": {
            "type": "boolean"
          },
          "regex": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "rule": {
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          }
        },
        "title": "SignupItem",
        "type": "object"
      },
      "object.Subscription": {
        "properties": {
          "createdTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "endTime": {
            "format": "datetime",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "payment": {
            "type": "string"
          },
          "period": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "pricing": {
            "type": "string"
          },
          "startTime": {
            "format": "datetime",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/object.SubscriptionState"
          },
          "user": {
            "type": "string"
          }
        },
        "title": "Subscription",
        "type": "object"
      },
      "object.SubscriptionState": {
        "enum": [
          "SubStatePending = \"Pending\"",
          "SubStateError = \"Error\"",
          "SubStateSuspended = \"Suspended\"",
          "SubStateActive = \"Active\"",
          "SubStateUpcoming = \"Upcoming\"",
          "SubStateExpired = \"Expired\""
        ],
        "example": "Pending",
        "title": "SubscriptionState",
        "type": "string"
      },
      "object.Syncer": {
        "properties": {
          "affiliationTable": {
            "type": "string"
          },
          "avatarBaseUrl": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "database": {
            "type": "string"
          },
          "databaseType": {
            "type": "string"
          },
          "errorText": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "format": "int64",
            "type": "integer"
          },
          "sslMode": {
            "type": "string"
          },
          "syncInterval": {
            "format": "int64",
            "type": "integer"
          },
          "table": {
            "type": "string"
          },
          "tableColumns": {
            "items": {
              "$ref": "#/components/schemas/object.TableColumn"
            },
            "type": "array"
          },
          "type": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "title": "Syncer",
        "type": "object"
      },
      "object.TableColumn": {
        "properties": {
          "casdoorName": {
            "type": "string"
          },
          "isHashed": {
            "type": "boolean"
          },
          "isKey": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "TableColumn",
        "type": "object"
      },
      "object.ThemeData": {
        "properties": {
          "borderRadius": {
            "format": "int64",
            "type": "integer"
          },
          "colorPrimary": {
            "type": "string"
          },
          "isCompact": {
            "type": "boolean"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "themeType": {
            "type": "string"
          }
        },
        "title": "ThemeData",
        "type": "object"
      },
      "object.Token": {
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "accessTokenHash": {
            "type": "string"
          },
          "application": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "codeChallenge": {
            "type": "string"
          },
          "codeExpireIn": {
            "format": "int64",
            "type": "integer"
          },
          "codeIsUsed": {
            "type": "boolean"
          },
          "createdTime": {
            "type": "string"
          },
          "expiresIn": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "refreshTokenHash": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "title": "Token",
        "type": "object"
      },
      "object.TokenError": {
        "properties": {
          "error": {
            "type": "string"
          },
          "error_description": {
            "type": "string"
          }
        },
        "title": "TokenError",
        "type": "object"
      },
      "object.TokenWrapper": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "expires_in": {
            "format": "int64",
            "type": "integer"
          },
          "id_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          }
        },
        "title": "TokenWrapper",
        "type": "object"
      },
      "object.User": {
        "properties": {
          "accessKey": {
            "type": "string"
          },
          "accessSecret": {
            "type": "string"
          },
          "address": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "adfs": {
            "type": "string"
          },
          "affiliation": {
            "type": "string"
          },
          "alipay": {
            "type": "string"
          },
          "amazon": {
            "type": "string"
          },
          "apple": {
            "type": "string"
          },
          "auth0": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "avatarType": {
            "type": "string"
          },
          "azuread": {
            "type": "string"
          },
          "azureadb2c": {
            "type": "string"
          },
          "baidu": {
            "type": "string"
          },
          "battlenet": {
            "type": "string"
          },
          "bilibili": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "birthday": {
            "type": "string"
          },
          "bitbucket": {
            "type": "string"
          },
          "box": {
            "type": "string"
          },
          "casdoor": {
            "type": "string"
          },
          "cloudfoundry": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "createdIp": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "custom": {
            "type": "string"
          },
          "dailymotion": {
            "type": "string"
          },
          "deezer": {
            "type": "string"
          },
          "deletedTime": {
            "type": "string"
          },
          "digitalocean": {
            "type": "string"
          },
          "dingtalk": {
            "type": "string"
          },
          "discord": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "douyin": {
            "type": "string"
          },
          "dropbox": {
            "type": "string"
          },
          "education": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "eveonline": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "facebook": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "fitbit": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "gitea": {
            "type": "string"
          },
          "gitee": {
            "type": "string"
          },
          "github": {
            "type": "string"
          },
          "gitlab": {
            "type": "string"
          },
          "google": {
            "type": "string"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hash": {
            "type": "string"
          },
          "heroku": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idCard": {
            "type": "string"
          },
          "idCardType": {
            "type": "string"
          },
          "influxcloud": {
            "type": "string"
          },
          "infoflow": {
            "type": "string"
          },
          "instagram": {
            "type": "string"
          },
          "intercom": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "isDefaultAvatar": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isForbidden": {
            "type": "boolean"
          },
          "isOnline": {
            "type": "boolean"
          },
          "kakao": {
            "type": "string"
          },
          "karma": {
            "format": "int64",
            "type": "integer"
          },
          "kwai": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "lark": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "lastSigninIp": {
            "type": "string"
          },
          "lastSigninTime": {
            "type": "string"
          },
          "lastSigninWrongTime": {
            "type": "string"
          },
          "lastfm": {
            "type": "string"
          },
          "ldap": {
            "type": "string"
          },
          "line": {
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "mailru": {
            "type": "string"
          },
          "managedAccounts": {
            "items": {
              "$ref": "#/components/schemas/object.ManagedAccount"
            },
            "type": "array"
          },
          "meetup": {
            "type": "string"
          },
          "metamask": {
            "type": "string"
          },
          "mfaEmailEnabled": {
            "type": "boolean"
          },
          "mfaPhoneEnabled": {
            "type": "boolean"
          },
          "microsoftonline": {
            "type": "string"
          },
          "multiFactorAuths": {
            "items": {
              "$ref": "#/components/schemas/object.MfaProps"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "naver": {
            "type": "string"
          },
          "nextcloud": {
            "type": "string"
          },
          "okta": {
            "type": "string"
          },
          "onedrive": {
            "type": "string"
          },
          "oura": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "passwordSalt": {
            "type": "string"
          },
          "passwordType": {
            "type": "string"
          },
          "patreon": {
            "type": "string"
          },
          "paypal": {
            "type": "string"
          },
          "permanentAvatar": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/object.Permission"
            },
            "type": "array"
          },
          "phone": {
            "type": "string"
          },
          "preHash": {
            "type": "string"
          },
          "preferredMfaType": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            }
          },
          "qq": {
            "type": "string"
          },
          "ranking": {
            "format": "int64",
            "type": "integer"
          },
          "recoveryCodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "region": {
            "type": "string"
          },
          "roles": {
            "items": {
              "$ref": "#/components/schemas/object.Role"
            },
            "type": "array"
          },
          "salesforce": {
            "type": "string"
          },
          "score": {
            "format": "int64",
            "type": "integer"
          },
          "shopify": {
            "type": "string"
          },
          "signinWrongTimes": {
            "format": "int64",
            "type": "integer"
          },
          "signupApplication": {
            "type": "string"
          },
          "slack": {
            "type": "string"
          },
          "soundcloud": {
            "type": "string"
          },
          "spotify": {
            "type": "string"
          },
          "steam": {
            "type": "string"
          },
          "strava": {
            "type": "string"
          },
          "stripe": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "tiktok": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "totpSecret": {
            "type": "string"
          },
          "tumblr": {
            "type": "string"
          },
          "twitch": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "typetalk": {
            "type": "string"
          },
          "uber": {
            "type": "string"
          },
          "updatedTime": {
            "type": "string"
          },
          "vk": {
            "type": "string"
          },
          "web3onboard": {
            "type": "string"
          },
          "webauthnCredentials": {
            "items": {
              "$ref": "#/components/schemas/webauthn.Credential"
            },
            "type": "array"
          },
          "wechat": {
            "type": "string"
          },
          "wecom": {
            "type": "string"
          },
          "weibo": {
            "type": "string"
          },
          "wepay": {
            "type": "string"
          },
          "xero": {
            "type": "string"
          },
          "yahoo": {
            "type": "string"
          },
          "yammer": {
            "type": "string"
          },
          "yandex": {
            "type": "string"
          },
          "zoom": {
            "type": "string"
          }
        },
        "title": "User",
        "type": "object"
      },
      "object.Userinfo": {
        "properties": {
          "address": {
            "type": "string"
          },
          "aud": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "iss": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "preferred_username": {
            "type": "string"
          },
          "sub": {
            "type": "string"
          }
        },
        "title": "Userinfo",
        "type": "object"
      },
      "object.Webhook": {
        "properties": {
          "contentType": {
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          },
          "events": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "headers": {
            "items": {
              "$ref": "#/components/schemas/object.Header"
            },
            "type": "array"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "isUserExtended": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "title": "Webhook",
        "type": "object"
      },
      "pp.PaymentState": {
        "enum": [
          "PaymentStatePaid = \"Paid\"",
          "PaymentStateCreated = \"Created\"",
          "PaymentStateCanceled = \"Canceled\"",
          "PaymentStateTimeout = \"Timeout\"",
          "PaymentStateError = \"Error\""
        ],
        "example": "Paid",
        "title": "PaymentState",
        "type": "string"
      },
      "protocol.CredentialAssertion": {
        "title": "CredentialAssertion",
        "type": "object"
      },
      "protocol.CredentialAssertionResponse": {
        "title": "CredentialAssertionResponse",
        "type": "object"
      },
      "protocol.CredentialCreation": {
        "title": "CredentialCreation",
        "type": "object"
      },
      "protocol.CredentialCreationResponse": {
        "title": "CredentialCreationResponse",
        "type": "object"
      },
      "util.SystemInfo": {
        "properties": {
          "cpuUsage": {
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "memoryTotal": {
            "format": "int64",
            "type": "integer"
          },
          "memoryUsed": {
            "format": "int64",
            "type": "integer"
          }
        },
        "title": "SystemInfo",
        "type": "object"
      },
      "util.VersionInfo": {
        "properties": {
          "commitId": {
            "type": "string"
          },
          "commitOffset": {
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "type": "string"
          }
        },
        "title": "VersionInfo",
        "type": "object"
      },
      "webauthn.Credential": {
        "title": "Credential",
        "type": "object"
      },
      "xorm.Engine": {
        "title": "Engine",
        "type": "object"
      },
      "xormadapter.Adapter": {
        "title": "Adapter",
        "type": "object"
      }
    },
    "securitySchemes": {
      "AccessToken": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "email": "casbin@googlegroups.com"
    },
    "description": "Swagger Docs of Casdoor Backend API",
    "title": "Casdoor RESTful API",
    "version": "1.503.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/.well-known/jwks": {
      "get": {
        "operationId": "RootController.GetJwks",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/jose.JSONWebKey"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "OIDC API"
        ]
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "description": "Get Oidc Discovery",
        "operationId": "RootController.GetOidcDiscovery",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.OidcDiscovery"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "OIDC API"
        ]
      }
    },
    "/api/Callback": {
      "post": {
        "description": "Get Login Error Counts",
        "operationId": "ApiController.Callback",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Callback API"
        ]
      }
    },
    "/api/add-adapter": {
      "post": {
        "description": "add adapter",
        "operationId": "ApiController.AddAdapter",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Adapter"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Adapter API"
        ]
      }
    },
    "/api/add-application": {
      "post": {
        "description": "add an application",
        "operationId": "ApiController.AddApplication",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Application"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Application API"
        ]
      }
    },
    "/api/add-cert": {
      "post": {
        "description": "add cert",
        "operationId": "ApiController.AddCert",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Cert"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Cert API"
        ]
      }
    },
    "/api/add-enforcer": {
      "post": {
        "description": "add enforcer",
        "operationId": "ApiController.AddEnforcer",
        "requestBody": {
          "$ref": "#/components/requestBodies/object"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Enforcer"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Enforcer API"
        ]
      }
    },
    "/api/add-group": {
      "post": {
        "description": "add group",
        "operationId": "ApiController.AddGroup",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Group"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Group API"
        ]
      }
    },
    "/api/add-invitation": {
      "post": {
        "description": "add invitation",
        "operationId": "ApiController.AddInvitation",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Invitation"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Invitation API"
        ]
      }
    },
    "/api/add-ldap": {
      "post": {
        "description": "add ldap",
        "operationId": "ApiController.AddLdap",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Ldap"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/add-model": {
      "post": {
        "description": "add model",
        "operationId": "ApiController.AddModel",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Model"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Model API"
        ]
      }
    },
    "/api/add-organization": {
      "post": {
        "description": "add organization",
        "operationId": "ApiController.AddOrganization",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Organization"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Organization API"
        ]
      }
    },
    "/api/add-payment": {
      "post": {
        "description": "add payment",
        "operationId": "ApiController.AddPayment",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Payment"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Payment API"
        ]
      }
    },
    "/api/add-permission": {
      "post": {
        "description": "add permission",
        "operationId": "ApiController.AddPermission",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Permission"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Permission API"
        ]
      }
    },
    "/api/add-plan": {
      "post": {
        "description": "add plan",
        "operationId": "ApiController.AddPlan",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Plan"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Plan API"
        ]
      }
    },
    "/api/add-pricing": {
      "post": {
        "description": "add pricing",
        "operationId": "ApiController.AddPricing",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Pricing"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Pricing API"
        ]
      }
    },
    "/api/add-product": {
      "post": {
        "description": "add product",
        "operationId": "ApiController.AddProduct",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Product"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Product API"
        ]
      }
    },
    "/api/add-provider": {
      "post": {
        "description": "add provider",
        "operationId": "ApiController.AddProvider",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Provider"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Provider API"
        ]
      }
    },
    "/api/add-resource": {
      "post": {
        "operationId": "ApiController.AddResource",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Resource"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "Success or error"
          }
        },
        "tags": [
          "Resource API"
        ]
      }
    },
    "/api/add-role": {
      "post": {
        "description": "add role",
        "operationId": "ApiController.AddRole",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Role"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Role API"
        ]
      }
    },
    "/api/add-session": {
      "post": {
        "description": "Add session for one user in one application. If there are other existing sessions, join the session into the list.",
        "operationId": "ApiController.AddSession",
        "parameters": [
          {
            "description": "The id(organization/application/user) of session",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "org123"
            }
          },
          {
            "description": "sessionId to be added",
            "in": "query",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Session API"
        ]
      }
    },
    "/api/add-subscription": {
      "post": {
        "description": "add subscription",
        "operationId": "ApiController.AddSubscription",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Subscription"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Subscription API"
        ]
      }
    },
    "/api/add-syncer": {
      "post": {
        "description": "add syncer",
        "operationId": "ApiController.AddSyncer",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Syncer"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Syncer API"
        ]
      }
    },
    "/api/add-token": {
      "post": {
        "description": "add token",
        "operationId": "ApiController.AddToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Token"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Token API"
        ]
      }
    },
    "/api/add-user": {
      "post": {
        "description": "add user",
        "operationId": "ApiController.AddUser",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.User"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/add-user-keys": {
      "post": {
        "operationId": "ApiController.AddUserKeys",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/add-webhook": {
      "post": {
        "description": "add webhook",
        "operationId": "ApiController.AddWebhook",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Webhook"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Webhook API"
        ]
      }
    },
    "/api/batch-enforce": {
      "post": {
        "description": "Call Casbin BatchEnforce API",
        "operationId": "ApiController.BatchEnforce",
        "parameters": [
          {
            "description": "permission id",
            "in": "query",
            "name": "permissionId",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          },
          {
            "description": "model id",
            "in": "query",
            "name": "modelId",
            "schema": {
              "type": "string",
              "example": "model123"
            }
          },
          {
            "description": "owner",
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "example": "john_doe"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "array of casbin requests",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Enforcer API"
        ]
      }
    },
    "/api/buy-product": {
      "post": {
        "description": "buy product",
        "operationId": "ApiController.BuyProduct",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the product",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/product456"
            }
          },
          {
            "description": "The name of the provider",
            "in": "query",
            "name": "providerName",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "AWS"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Product API"
        ]
      }
    },
    "/api/check-user-password": {
      "post": {
        "operationId": "ApiController.CheckUserPassword",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/delete-adapter": {
      "post": {
        "description": "delete adapter",
        "operationId": "ApiController.DeleteAdapter",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Adapter"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Adapter API"
        ]
      }
    },
    "/api/delete-application": {
      "post": {
        "description": "delete an application",
        "operationId": "ApiController.DeleteApplication",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Application"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Application API"
        ]
      }
    },
    "/api/delete-cert": {
      "post": {
        "description": "delete cert",
        "operationId": "ApiController.DeleteCert",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Cert"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Cert API"
        ]
      }
    },
    "/api/delete-enforcer": {
      "post": {
        "description": "delete enforcer",
        "operationId": "ApiController.DeleteEnforcer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object.Enforcer"
              }
            }
          },
          "description": "The enforcer object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Enforcer"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Enforcer API"
        ]
      }
    },
    "/api/delete-group": {
      "post": {
        "description": "delete group",
        "operationId": "ApiController.DeleteGroup",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Group"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Group API"
        ]
      }
    },
    "/api/delete-invitation": {
      "post": {
        "description": "delete invitation",
        "operationId": "ApiController.DeleteInvitation",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Invitation"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Invitation API"
        ]
      }
    },
    "/api/delete-ldap": {
      "post": {
        "description": "delete ldap",
        "operationId": "ApiController.DeleteLdap",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Ldap"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/delete-mfa/": {
      "post": {
        "description": ": Delete MFA",
        "operationId": "ApiController.DeleteMfa",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "MFA API"
        ]
      }
    },
    "/api/delete-model": {
      "post": {
        "description": "delete model",
        "operationId": "ApiController.DeleteModel",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Model"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Model API"
        ]
      }
    },
    "/api/delete-organization": {
      "post": {
        "description": "delete organization",
        "operationId": "ApiController.DeleteOrganization",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Organization"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Organization API"
        ]
      }
    },
    "/api/delete-payment": {
      "post": {
        "description": "delete payment",
        "operationId": "ApiController.DeletePayment",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Payment"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Payment API"
        ]
      }
    },
    "/api/delete-permission": {
      "post": {
        "description": "delete permission",
        "operationId": "ApiController.DeletePermission",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Permission"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Permission API"
        ]
      }
    },
    "/api/delete-plan": {
      "post": {
        "description": "delete plan",
        "operationId": "ApiController.DeletePlan",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Plan"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Plan API"
        ]
      }
    },
    "/api/delete-pricing": {
      "post": {
        "description": "delete pricing",
        "operationId": "ApiController.DeletePricing",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Pricing"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Pricing API"
        ]
      }
    },
    "/api/delete-product": {
      "post": {
        "description": "delete product",
        "operationId": "ApiController.DeleteProduct",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Product"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Product API"
        ]
      }
    },
    "/api/delete-provider": {
      "post": {
        "description": "delete provider",
        "operationId": "ApiController.DeleteProvider",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Provider"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Provider API"
        ]
      }
    },
    "/api/delete-resource": {
      "post": {
        "operationId": "ApiController.DeleteResource",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Resource"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "Success or error"
          }
        },
        "tags": [
          "Resource API"
        ]
      }
    },
    "/api/delete-role": {
      "post": {
        "description": "delete role",
        "operationId": "ApiController.DeleteRole",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Role"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Role API"
        ]
      }
    },
    "/api/delete-session": {
      "post": {
        "description": "Delete session for one user in one application.",
        "operationId": "ApiController.DeleteSession",
        "parameters": [
          {
            "description": "The id(organization/application/user) of session",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "org123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Session API"
        ]
      }
    },
    "/api/delete-subscription": {
      "post": {
        "description": "delete subscription",
        "operationId": "ApiController.DeleteSubscription",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Subscription"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Subscription API"
        ]
      }
    },
    "/api/delete-syncer": {
      "post": {
        "description": "delete syncer",
        "operationId": "ApiController.DeleteSyncer",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Syncer"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Syncer API"
        ]
      }
    },
    "/api/delete-token": {
      "post": {
        "description": "delete token",
        "operationId": "ApiController.DeleteToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Token"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Token API"
        ]
      }
    },
    "/api/delete-user": {
      "post": {
        "description": "delete user",
        "operationId": "ApiController.DeleteUser",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.User"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/delete-webhook": {
      "post": {
        "description": "delete webhook",
        "operationId": "ApiController.DeleteWebhook",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Webhook"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Webhook API"
        ]
      }
    },
    "/api/enforce": {
      "post": {
        "description": "Call Casbin Enforce API",
        "operationId": "ApiController.Enforce",
        "parameters": [
          {
            "description": "permission id",
            "in": "query",
            "name": "permissionId",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          },
          {
            "description": "model id",
            "in": "query",
            "name": "modelId",
            "schema": {
              "type": "string",
              "example": "model123"
            }
          },
          {
            "description": "resource id",
            "in": "query",
            "name": "resourceId",
            "schema": {
              "type": "string",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          },
          {
            "description": "owner",
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "example": "john_doe"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "Casbin request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Enforcer API"
        ]
      }
    },
    "/api/get-account": {
      "get": {
        "description": "get the details of the current account",
        "operationId": "ApiController.GetAccount",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/get-adapter": {
      "get": {
        "description": "get adapter",
        "operationId": "ApiController.GetAdapter",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the adapter",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/adapter456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Adapter"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Adapter API"
        ]
      }
    },
    "/api/get-adapters": {
      "get": {
        "description": "get adapters",
        "operationId": "ApiController.GetAdapters",
        "parameters": [
          {
            "description": "The owner of adapters",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "adapterOwner123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Adapter"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Adapter API"
        ]
      }
    },
    "/api/get-app-login": {
      "get": {
        "description": "get application login",
        "operationId": "ApiController.GetApplicationLogin",
        "parameters": [
          {
            "description": "client id",
            "in": "query",
            "name": "clientId",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "12345"
            }
          },
          {
            "description": "response type",
            "in": "query",
            "name": "responseType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "xml"
              ],
              "example": "json"
            }
          },
          {
            "description": "redirect uri",
            "in": "query",
            "name": "redirectUri",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://example.com/callback"
            }
          },
          {
            "description": "scope",
            "in": "query",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "read write"
              ],
              "example": "read write"
            }
          },
          {
            "description": "state",
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "pattern": "^[A-Z]{2}$",
              "example": "CA"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/get-application": {
      "get": {
        "description": "get the detail of an application",
        "operationId": "ApiController.GetApplication",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the application.",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/app456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Application"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Application API"
        ]
      }
    },
    "/api/get-applications": {
      "get": {
        "description": "get all applications",
        "operationId": "ApiController.GetApplications",
        "parameters": [
          {
            "description": "The owner of applications.",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "exampleOwner"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Application"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Application API"
        ]
      }
    },
    "/api/get-captcha": {
      "get": {
        "operationId": "ApiController.GetCaptcha",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/get-captcha-status": {
      "get": {
        "description": "Get Login Error Counts",
        "operationId": "ApiController.GetCaptchaStatus",
        "parameters": [
          {
            "description": "The id ( owner/name ) of user",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "john_doe/example_project"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Token API"
        ]
      }
    },
    "/api/get-cert": {
      "get": {
        "description": "get cert",
        "operationId": "ApiController.GetCert",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the cert",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "owner123/cert456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Cert"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Cert API"
        ]
      }
    },
    "/api/get-certs": {
      "get": {
        "description": "get certs",
        "operationId": "ApiController.GetCerts",
        "parameters": [
          {
            "description": "The owner of certs",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "user123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Cert"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Cert API"
        ]
      }
    },
    "/api/get-dashboard": {
      "get": {
        "description": "get information of dashboard",
        "operationId": "ApiController.GetDashboard",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "System API"
        ]
      }
    },
    "/api/get-default-application": {
      "get": {
        "description": "get default application",
        "operationId": "ApiController.GetDefaultApplication",
        "parameters": [
          {
            "description": "organization id",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Organization API"
        ]
      }
    },
    "/api/get-email-and-phone": {
      "get": {
        "description": "get email and phone by username",
        "operationId": "ApiController.GetEmailAndPhone",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "organization": {
                    "description": "The organization of the user",
                    "type": "string",
                    "example": "Tech Corp"
                  },
                  "username": {
                    "description": "The username of the user",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "example": "johndoe"
                  }
                },
                "required": [
                  "username"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/get-enforcer": {
      "get": {
        "description": "get enforcer",
        "operationId": "ApiController.GetEnforcer",
        "parameters": [
          {
            "description": "The id ( owner/name )  of enforcer",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/enforcer456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Enforcer"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Enforcer API"
        ]
      }
    },
    "/api/get-enforcers": {
      "get": {
        "description": "get enforcers",
        "operationId": "ApiController.GetEnforcers",
        "parameters": [
          {
            "description": "The owner of enforcers",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "admin"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Enforcer"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Enforcer API"
        ]
      }
    },
    "/api/get-global-certs": {
      "get": {
        "description": "get globle certs",
        "operationId": "ApiController.GetGlobalCerts",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Cert"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Cert API"
        ]
      }
    },
    "/api/get-global-providers": {
      "get": {
        "description": "get Global providers",
        "operationId": "ApiController.GetGlobalProviders",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Provider"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Provider API"
        ]
      }
    },
    "/api/get-global-users": {
      "get": {
        "description": "get global users",
        "operationId": "ApiController.GetGlobalUsers",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.User"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/get-group": {
      "get": {
        "description": "get group",
        "operationId": "ApiController.GetGroup",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the group",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/group456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Group"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Group API"
        ]
      }
    },
    "/api/get-groups": {
      "get": {
        "description": "get groups",
        "operationId": "ApiController.GetGroups",
        "parameters": [
          {
            "description": "The owner of groups",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "groupAdmin"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Group"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Group API"
        ]
      }
    },
    "/api/get-invitation": {
      "get": {
        "description": "get invitation",
        "operationId": "ApiController.GetInvitation",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the invitation",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/invitation456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Invitation"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Invitation API"
        ]
      }
    },
    "/api/get-invitations": {
      "get": {
        "description": "get invitations",
        "operationId": "ApiController.GetInvitations",
        "parameters": [
          {
            "description": "The owner of invitations",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "user123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Invitation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Invitation API"
        ]
      }
    },
    "/api/get-ldap": {
      "get": {
        "description": "get ldap",
        "operationId": "ApiController.GetLdap",
        "parameters": [
          {
            "description": "id",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Ldap"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/get-ldap-users": {
      "get": {
        "description": "get ldap users",
        "operationId": "ApiController.GetLdapser",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.LdapResp"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/get-ldaps": {
      "get": {
        "description": "get ldaps",
        "operationId": "ApiController.GetLdaps",
        "parameters": [
          {
            "description": "owner",
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "example": "john_doe"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Ldap"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/get-model": {
      "get": {
        "description": "get model",
        "operationId": "ApiController.GetModel",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the model",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/model456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Model"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Model API"
        ]
      }
    },
    "/api/get-models": {
      "get": {
        "description": "get models",
        "operationId": "ApiController.GetModels",
        "parameters": [
          {
            "description": "The owner of models",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "modelOwner123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Model"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Model API"
        ]
      }
    },
    "/api/get-organization": {
      "get": {
        "description": "get organization",
        "operationId": "ApiController.GetOrganization",
        "parameters": [
          {
            "description": "organization id",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Organization"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Organization API"
        ]
      }
    },
    "/api/get-organization-applications": {
      "get": {
        "description": "get the detail of the organization's application",
        "operationId": "ApiController.GetOrganizationApplications",
        "parameters": [
          {
            "description": "The organization name",
            "in": "query",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "Acme Corp"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Application"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Application API"
        ]
      }
    },
    "/api/get-organization-names": {
      "get": {
        "description": "get all organization name and displayName",
        "operationId": "ApiController.GetOrganizationNames",
        "parameters": [
          {
            "description": "owner",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "john_doe"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Organization"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Organization API"
        ]
      }
    },
    "/api/get-organizations": {
      "get": {
        "description": "get organizations",
        "operationId": "ApiController.GetOrganizations",
        "parameters": [
          {
            "description": "owner",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "john_doe"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Organization"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Organization API"
        ]
      }
    },
    "/api/get-payment": {
      "get": {
        "description": "get payment",
        "operationId": "ApiController.GetPayment",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the payment",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "user123/payment456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Payment"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Payment API"
        ]
      }
    },
    "/api/get-payments": {
      "get": {
        "description": "get payments",
        "operationId": "ApiController.GetPayments",
        "parameters": [
          {
            "description": "The owner of payments",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "JohnDoe"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Payment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Payment API"
        ]
      }
    },
    "/api/get-permission": {
      "get": {
        "description": "get permission",
        "operationId": "ApiController.GetPermission",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the permission",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "owner123/permission456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Permission"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Permission API"
        ]
      }
    },
    "/api/get-permissions": {
      "get": {
        "description": "get permissions",
        "operationId": "ApiController.GetPermissions",
        "parameters": [
          {
            "description": "The owner of permissions",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "user123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Permission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Permission API"
        ]
      }
    },
    "/api/get-permissions-by-role": {
      "get": {
        "description": "get permissions by role",
        "operationId": "ApiController.GetPermissionsByRole",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the role",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner1/role1"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Permission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Permission API"
        ]
      }
    },
    "/api/get-permissions-by-submitter": {
      "get": {
        "description": "get permissions by submitter",
        "operationId": "ApiController.GetPermissionsBySubmitter",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Permission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Permission API"
        ]
      }
    },
    "/api/get-plan": {
      "get": {
        "description": "get plan",
        "operationId": "ApiController.GetPlan",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the plan",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/plan456"
            }
          },
          {
            "description": "Should include plan's option",
            "in": "query",
            "name": "includeOption",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Plan"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Plan API"
        ]
      }
    },
    "/api/get-plans": {
      "get": {
        "description": "get plans",
        "operationId": "ApiController.GetPlans",
        "parameters": [
          {
            "description": "The owner of plans",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "planOwner123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Plan"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Plan API"
        ]
      }
    },
    "/api/get-pricing": {
      "get": {
        "description": "get pricing",
        "operationId": "ApiController.GetPricing",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the pricing",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/pricing456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Pricing"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Pricing API"
        ]
      }
    },
    "/api/get-pricings": {
      "get": {
        "description": "get pricings",
        "operationId": "ApiController.GetPricings",
        "parameters": [
          {
            "description": "The owner of pricings",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "example": "user123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Pricing"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Pricing API"
        ]
      }
    },
    "/api/get-product": {
      "get": {
        "description": "get product",
        "operationId": "ApiController.GetProduct",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the product",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/product456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Product"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Product API"
        ]
      }
    },
    "/api/get-products": {
      "get": {
        "description": "get products",
        "operationId": "ApiController.GetProducts",
        "parameters": [
          {
            "description": "The owner of products",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "JohnDoe"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Product"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Product API"
        ]
      }
    },
    "/api/get-prometheus-info": {
      "get": {
        "description": "get Prometheus Info",
        "operationId": "ApiController.GetPrometheusInfo",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.PrometheusInfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "System API"
        ]
      }
    },
    "/api/get-provider": {
      "get": {
        "description": "get provider",
        "operationId": "ApiController.GetProvider",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the provider",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/provider456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Provider"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Provider API"
        ]
      }
    },
    "/api/get-providers": {
      "get": {
        "description": "get providers",
        "operationId": "ApiController.GetProviders",
        "parameters": [
          {
            "description": "The owner of providers",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "providerOwner123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Provider"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Provider API"
        ]
      }
    },
    "/api/get-resource": {
      "get": {
        "description": "get resource",
        "operationId": "ApiController.GetResource",
        "parameters": [
          {
            "description": "The id ( owner/name ) of resource",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/resource456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Resource"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Resource API"
        ]
      }
    },
    "/api/get-resources": {
      "get": {
        "description": "get resources",
        "operationId": "ApiController.GetResources",
        "parameters": [
          {
            "description": "Owner",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "JohnDoe"
            }
          },
          {
            "description": "User",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "john_doe"
            }
          },
          {
            "description": "Page Size",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "example": 10
            }
          },
          {
            "description": "Page Number",
            "in": "query",
            "name": "p",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1
            }
          },
          {
            "description": "Field",
            "in": "query",
            "name": "field",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            }
          },
          {
            "description": "Value",
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string",
              "example": "exampleValue"
            }
          },
          {
            "description": "Sort Field",
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "date",
                "id"
              ],
              "example": "name"
            }
          },
          {
            "description": "Sort Order",
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Resource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Resource API"
        ]
      }
    },
    "/api/get-role": {
      "get": {
        "description": "get role",
        "operationId": "ApiController.GetRole",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the role",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/role_name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Role"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Role API"
        ]
      }
    },
    "/api/get-roles": {
      "get": {
        "description": "get roles",
        "operationId": "ApiController.GetRoles",
        "parameters": [
          {
            "description": "The owner of roles",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "user123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Role"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Role API"
        ]
      }
    },
    "/api/get-session": {
      "get": {
        "description": "Get session for one user in one application.",
        "operationId": "ApiController.GetSingleSession",
        "parameters": [
          {
            "description": "The id(organization/application/user) of session",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "org123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Session API"
        ]
      }
    },
    "/api/get-sessions": {
      "get": {
        "description": "Get organization user sessions.",
        "operationId": "ApiController.GetSessions",
        "parameters": [
          {
            "description": "The organization name",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "exampleOrg"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Session API"
        ]
      }
    },
    "/api/get-sorted-users": {
      "get": {
        "operationId": "ApiController.GetSortedUsers",
        "parameters": [
          {
            "description": "The owner of users",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "user123"
            }
          },
          {
            "description": "The DB column name to sort by, e.g., created_time",
            "in": "query",
            "name": "sorter",
            "required": true,
            "schema": {
              "type": "string",
              "example": "created_time"
            }
          },
          {
            "description": "The count of users to return, e.g., 25",
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.User"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/get-subscription": {
      "get": {
        "description": "get subscription",
        "operationId": "ApiController.GetSubscription",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the subscription",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/subscription123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Subscription"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Subscription API"
        ]
      }
    },
    "/api/get-subscriptions": {
      "get": {
        "description": "get subscriptions",
        "operationId": "ApiController.GetSubscriptions",
        "parameters": [
          {
            "description": "The owner of subscriptions",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "user123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Subscription"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Subscription API"
        ]
      }
    },
    "/api/get-syncer": {
      "get": {
        "description": "get syncer",
        "operationId": "ApiController.GetSyncer",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the syncer",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/syncer456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Syncer"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Syncer API"
        ]
      }
    },
    "/api/get-syncers": {
      "get": {
        "description": "get syncers",
        "operationId": "ApiController.GetSyncers",
        "parameters": [
          {
            "description": "The owner of syncers",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "example": "user123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Syncer"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Syncer API"
        ]
      }
    },
    "/api/get-system-info": {
      "get": {
        "description": "get system info like CPU and memory usage",
        "operationId": "ApiController.GetSystemInfo",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/util.SystemInfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "System API"
        ]
      }
    },
    "/api/get-token": {
      "get": {
        "description": "get token",
        "operationId": "ApiController.GetToken",
        "parameters": [
          {
            "description": "The id ( owner/name ) of token",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "owner123/token456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Token"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Token API"
        ]
      }
    },
    "/api/get-tokens": {
      "get": {
        "description": "get tokens",
        "operationId": "ApiController.GetTokens",
        "parameters": [
          {
            "description": "The owner of tokens",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            }
          },
          {
            "description": "The size of each page",
            "in": "query",
            "name": "pageSize",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "example": 10
            }
          },
          {
            "description": "The number of the page",
            "in": "query",
            "name": "p",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Token"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Token API"
        ]
      }
    },
    "/api/get-user": {
      "get": {
        "description": "get user",
        "operationId": "ApiController.GetUser",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the user",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "john_doe/example_project"
            }
          },
          {
            "description": "The owner of the user",
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "example": "john_doe"
            }
          },
          {
            "description": "The email of the user",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "example": "user@example.com"
            }
          },
          {
            "description": "The phone of the user",
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string",
              "pattern": "^\\+?[1-9]\\d{1,14}$",
              "example": "+1234567890"
            }
          },
          {
            "description": "The userId of the user",
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.User"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/get-user-application": {
      "get": {
        "description": "get the detail of the user's application",
        "operationId": "ApiController.GetUserApplication",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the user",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "john_doe/example_project"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Application"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Application API"
        ]
      }
    },
    "/api/get-user-count": {
      "get": {
        "operationId": "ApiController.GetUserCount",
        "parameters": [
          {
            "description": "The owner of users",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "admin"
            }
          },
          {
            "description": "The filter for query, 1 for online, 0 for offline, empty string for all users",
            "in": "query",
            "name": "isOnline",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "1",
                "0",
                ""
              ],
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{int} int The count of filtered users for an organization"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/get-user-payments": {
      "get": {
        "description": "get payments for a user",
        "operationId": "ApiController.GetUserPayments",
        "parameters": [
          {
            "description": "The owner of payments",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "JohnDoe"
            }
          },
          {
            "description": "The organization of the user",
            "in": "query",
            "name": "organization",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Acme Corp"
            }
          },
          {
            "description": "The username of the user",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 20,
              "example": "john_doe"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Payment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Payment API"
        ]
      }
    },
    "/api/get-users": {
      "get": {
        "operationId": "ApiController.GetUsers",
        "parameters": [
          {
            "description": "The owner of users",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "user123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.User"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/get-version-info": {
      "get": {
        "description": "get version info like Casdoor release version and commit ID",
        "operationId": "ApiController.GetVersionInfo",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/util.VersionInfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "System API"
        ]
      }
    },
    "/api/get-webhook": {
      "get": {
        "description": "get webhook",
        "operationId": "ApiController.GetWebhook",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the webhook",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "default": "built-in/admin",
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "user123/webhook1"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Webhook"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Webhook API"
        ]
      }
    },
    "/api/get-webhook-event": {
      "get": {
        "operationId": "ApiController.GetWebhookEventType",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "System API"
        ]
      }
    },
    "/api/get-webhooks": {
      "get": {
        "description": "get webhooks",
        "operationId": "ApiController.GetWebhooks",
        "parameters": [
          {
            "description": "The owner of webhooks",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "default": "built-in/admin",
              "type": "string",
              "example": "built-in/admin"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/object.Webhook"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "security": [
          {
            "test_apiKey": []
          }
        ],
        "tags": [
          "Webhook API"
        ]
      }
    },
    "/api/health": {
      "get": {
        "description": "check if the system is live",
        "operationId": "ApiController.Health",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "System API"
        ]
      }
    },
    "/api/invoice-payment": {
      "post": {
        "description": "invoice payment",
        "operationId": "ApiController.InvoicePayment",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the payment",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "user123/payment456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Payment API"
        ]
      }
    },
    "/api/is-session-duplicated": {
      "get": {
        "description": "Check if there are other different sessions for one user in one application.",
        "operationId": "ApiController.IsSessionDuplicated",
        "parameters": [
          {
            "description": "The id(organization/application/user) of session",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "org123"
            }
          },
          {
            "description": "sessionId to be checked",
            "in": "query",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Session API"
        ]
      }
    },
    "/api/login": {
      "post": {
        "description": "login",
        "operationId": "ApiController.Login",
        "parameters": [
          {
            "description": "clientId",
            "in": "query",
            "name": "clientId",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "12345"
            }
          },
          {
            "description": "responseType",
            "in": "query",
            "name": "responseType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code",
                "token"
              ],
              "example": "code"
            }
          },
          {
            "description": "redirectUri",
            "in": "query",
            "name": "redirectUri",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://example.com/callback"
            }
          },
          {
            "description": "scope",
            "in": "query",
            "name": "scope",
            "schema": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "admin"
              ],
              "example": "read"
            }
          },
          {
            "description": "state",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "pattern": "^[A-Z]{2}$",
              "example": "CA"
            }
          },
          {
            "description": "nonce",
            "in": "query",
            "name": "nonce",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "a1b2c3d4e5f6"
            }
          },
          {
            "description": "code_challenge_method",
            "in": "query",
            "name": "code_challenge_method",
            "schema": {
              "type": "string",
              "enum": [
                "plain",
                "S256"
              ],
              "example": "S256"
            }
          },
          {
            "description": "code_challenge",
            "in": "query",
            "name": "code_challenge",
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/controllers.AuthForm"
              }
            }
          },
          "description": "Login information",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/login/oauth/access_token": {
      "post": {
        "description": "get OAuth access token",
        "operationId": "ApiController.GetOAuthToken",
        "parameters": [
          {
            "description": "OAuth grant type",
            "in": "query",
            "name": "grant_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "authorization_code",
                "password",
                "client_credentials",
                "refresh_token"
              ],
              "example": "authorization_code"
            }
          },
          {
            "description": "OAuth client id",
            "in": "query",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12345-abcde-67890-fghij"
            }
          },
          {
            "description": "OAuth client secret",
            "in": "query",
            "name": "client_secret",
            "required": true,
            "schema": {
              "type": "string",
              "format": "password",
              "minLength": 8,
              "maxLength": 64
            }
          },
          {
            "description": "OAuth code",
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "abc123xyz456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.TokenWrapper"
                }
              }
            },
            "description": "The Response object"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.TokenError"
                }
              }
            },
            "description": "The Response object"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.TokenError"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Token API"
        ]
      }
    },
    "/api/login/oauth/introspect": {
      "post": {
        "description": "The introspection endpoint is an OAuth 2.0 endpoint that takes a",
        "operationId": "ApiController.IntrospectToken",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "token": {
                    "description": "access_token's value or refresh_token's value",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  },
                  "token_type_hint": {
                    "description": "the token type access_token or refresh_token",
                    "type": "string",
                    "enum": [
                      "access_token",
                      "refresh_token"
                    ],
                    "example": "access_token"
                  }
                },
                "required": [
                  "token"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.IntrospectionResponse"
                }
              }
            },
            "description": "The Response object"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.TokenError"
                }
              }
            },
            "description": "The Response object"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.TokenError"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/login/oauth/refresh_token": {
      "post": {
        "description": "refresh OAuth access token",
        "operationId": "ApiController.RefreshToken",
        "parameters": [
          {
            "description": "OAuth grant type",
            "in": "query",
            "name": "grant_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "authorization_code",
                "password",
                "client_credentials",
                "refresh_token"
              ],
              "example": "authorization_code"
            }
          },
          {
            "description": "OAuth refresh token",
            "in": "query",
            "name": "refresh_token",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            }
          },
          {
            "description": "OAuth scope",
            "in": "query",
            "name": "scope",
            "required": true,
            "schema": {
              "type": "string",
              "example": "read:user"
            }
          },
          {
            "description": "OAuth client id",
            "in": "query",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "abc123def456"
            }
          },
          {
            "description": "OAuth client secret",
            "in": "query",
            "name": "client_secret",
            "schema": {
              "type": "string",
              "format": "password",
              "minLength": 8,
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.TokenWrapper"
                }
              }
            },
            "description": "The Response object"
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.TokenError"
                }
              }
            },
            "description": "The Response object"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.TokenError"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Token API"
        ]
      }
    },
    "/api/logout": {
      "post": {
        "description": "logout the current user",
        "operationId": "ApiController.Logout",
        "parameters": [
          {
            "description": "id_token_hint",
            "in": "query",
            "name": "id_token_hint",
            "schema": {
              "type": "string",
              "description": "A JSON Web Token (JWT) that represents the identity of the user on whose behalf the request is being made.",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            }
          },
          {
            "description": "post_logout_redirect_uri",
            "in": "query",
            "name": "post_logout_redirect_uri",
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://example.com/logout"
            }
          },
          {
            "description": "state",
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2,
              "pattern": "^[A-Z]{2}$",
              "example": "CA"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/mfa/setup/enable": {
      "post": {
        "description": "enable totp",
        "operationId": "ApiController.MfaSetupEnable",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "MFA API"
        ]
      }
    },
    "/api/mfa/setup/initiate": {
      "post": {
        "description": "setup MFA",
        "operationId": "ApiController.MfaSetupInitiate",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "MFA API"
        ]
      }
    },
    "/api/mfa/setup/verify": {
      "post": {
        "description": "setup verify totp",
        "operationId": "ApiController.MfaSetupVerify",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "MFA API"
        ]
      }
    },
    "/api/notify-payment": {
      "post": {
        "description": "notify payment",
        "operationId": "ApiController.NotifyPayment",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Payment"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Payment API"
        ]
      }
    },
    "/api/reset-email-or-phone": {
      "post": {
        "operationId": "ApiController.ResetEmailOrPhone",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/run-syncer": {
      "get": {
        "description": "run syncer",
        "operationId": "ApiController.RunSyncer",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Syncer"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Syncer API"
        ]
      }
    },
    "/api/send-email": {
      "post": {
        "description": "This API is not for Casdoor frontend to call, it is for Casdoor SDKs.",
        "operationId": "ApiController.SendEmail",
        "parameters": [
          {
            "description": "The clientId of the application",
            "in": "query",
            "name": "clientId",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "12345"
            }
          },
          {
            "description": "The clientSecret of the application",
            "in": "query",
            "name": "clientSecret",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/controllers.EmailForm"
              }
            }
          },
          "description": "Details of the email request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Service API"
        ]
      }
    },
    "/api/send-notification": {
      "post": {
        "description": "This API is not for Casdoor frontend to call, it is for Casdoor SDKs.",
        "operationId": "ApiController.SendNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/controllers.NotificationForm"
              }
            }
          },
          "description": "Details of the notification request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Service API"
        ]
      }
    },
    "/api/send-sms": {
      "post": {
        "description": "This API is not for Casdoor frontend to call, it is for Casdoor SDKs.",
        "operationId": "ApiController.SendSms",
        "parameters": [
          {
            "description": "The clientId of the application",
            "in": "query",
            "name": "clientId",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "12345"
            }
          },
          {
            "description": "The clientSecret of the application",
            "in": "query",
            "name": "clientSecret",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/controllers.SmsForm"
              }
            }
          },
          "description": "Details of the sms request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Service API"
        ]
      }
    },
    "/api/send-verification-code": {
      "post": {
        "operationId": "ApiController.SendVerificationCode",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Verification API"
        ]
      }
    },
    "/api/set-password": {
      "post": {
        "description": "set password",
        "operationId": "ApiController.SetPassword",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "newPassword": {
                    "description": "The new password of the user",
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 20,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$",
                    "example": "NewPassword123!"
                  },
                  "oldPassword": {
                    "description": "The old password of the user",
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 20,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$",
                    "example": "OldPassword123!"
                  },
                  "userName": {
                    "description": "The name of the user",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "example": "john_doe"
                  },
                  "userOwner": {
                    "description": "The owner of the user",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "example": "company_xyz"
                  }
                },
                "required": [
                  "userOwner"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/set-preferred-mfa": {
      "post": {
        "description": ": Set specific Mfa Preferred",
        "operationId": "ApiController.SetPreferredMfa",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "MFA API"
        ]
      }
    },
    "/api/signup": {
      "post": {
        "description": "sign up a new user",
        "operationId": "ApiController.Signup",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "password": {
                    "description": "The password",
                    "type": "string",
                    "minLength": 8,
                    "format": "password"
                  },
                  "username": {
                    "description": "The username to sign up",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "example": "john_doe"
                  }
                },
                "required": [
                  "username"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/sync-ldap-users": {
      "post": {
        "description": "sync ldap users",
        "operationId": "ApiController.SyncLdapUsers",
        "parameters": [
          {
            "description": "id",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "550e8400-e29b-41d4-a716-446655440000"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.LdapSyncResp"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/unlink": {
      "post": {
        "operationId": "ApiController.Unlink",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/update-adapter": {
      "post": {
        "description": "update adapter",
        "operationId": "ApiController.UpdateAdapter",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the adapter",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/adapter456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Adapter"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Adapter API"
        ]
      }
    },
    "/api/update-application": {
      "post": {
        "description": "update an application",
        "operationId": "ApiController.UpdateApplication",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the application",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/app456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Application"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Application API"
        ]
      }
    },
    "/api/update-cert": {
      "post": {
        "description": "update cert",
        "operationId": "ApiController.UpdateCert",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the cert",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "owner123/certificate456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Cert"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Cert API"
        ]
      }
    },
    "/api/update-enforcer": {
      "post": {
        "description": "update enforcer",
        "operationId": "ApiController.UpdateEnforcer",
        "parameters": [
          {
            "description": "The id ( owner/name )  of enforcer",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/enforcer456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Enforcer"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Enforcer API"
        ]
      }
    },
    "/api/update-group": {
      "post": {
        "description": "update group",
        "operationId": "ApiController.UpdateGroup",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the group",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/group456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Group"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Group API"
        ]
      }
    },
    "/api/update-invitation": {
      "post": {
        "description": "update invitation",
        "operationId": "ApiController.UpdateInvitation",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the invitation",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/invitation456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Invitation"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Invitation API"
        ]
      }
    },
    "/api/update-ldap": {
      "post": {
        "description": "update ldap",
        "operationId": "ApiController.UpdateLdap",
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Ldap"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/update-model": {
      "post": {
        "description": "update model",
        "operationId": "ApiController.UpdateModel",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the model",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/model456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Model"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Model API"
        ]
      }
    },
    "/api/update-organization": {
      "post": {
        "description": "update organization",
        "operationId": "ApiController.UpdateOrganization",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the organization",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "myorg/myrepo"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Organization"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Organization API"
        ]
      }
    },
    "/api/update-payment": {
      "post": {
        "description": "update payment",
        "operationId": "ApiController.UpdatePayment",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the payment",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "user123/payment456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Payment"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Payment API"
        ]
      }
    },
    "/api/update-permission": {
      "post": {
        "description": "update permission",
        "operationId": "ApiController.UpdatePermission",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the permission",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/permission456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Permission"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Permission API"
        ]
      }
    },
    "/api/update-plan": {
      "post": {
        "description": "update plan",
        "operationId": "ApiController.UpdatePlan",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the plan",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/plan456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Plan"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Plan API"
        ]
      }
    },
    "/api/update-pricing": {
      "post": {
        "description": "update pricing",
        "operationId": "ApiController.UpdatePricing",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the pricing",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/pricing456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Pricing"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Pricing API"
        ]
      }
    },
    "/api/update-product": {
      "post": {
        "description": "update product",
        "operationId": "ApiController.UpdateProduct",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the product",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/product456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Product"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Product API"
        ]
      }
    },
    "/api/update-provider": {
      "post": {
        "description": "update provider",
        "operationId": "ApiController.UpdateProvider",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the provider",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/provider456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Provider"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Provider API"
        ]
      }
    },
    "/api/update-resource": {
      "post": {
        "description": "get resource",
        "operationId": "ApiController.UpdateResource",
        "parameters": [
          {
            "description": "The id ( owner/name ) of resource",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/resource456"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/object.Resource"
              }
            }
          },
          "description": "The resource object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "Success or error"
          }
        },
        "tags": [
          "Resource API"
        ]
      }
    },
    "/api/update-role": {
      "post": {
        "description": "update role",
        "operationId": "ApiController.UpdateRole",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the role",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "owner123/role_name"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Role"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Role API"
        ]
      }
    },
    "/api/update-session": {
      "post": {
        "description": "Update session for one user in one application.",
        "operationId": "ApiController.UpdateSession",
        "parameters": [
          {
            "description": "The id(organization/application/user) of session",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "org123"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Session API"
        ]
      }
    },
    "/api/update-subscription": {
      "post": {
        "description": "update subscription",
        "operationId": "ApiController.UpdateSubscription",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the subscription",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/subscription456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Subscription"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Subscription API"
        ]
      }
    },
    "/api/update-syncer": {
      "post": {
        "description": "update syncer",
        "operationId": "ApiController.UpdateSyncer",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the syncer",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/syncer456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Syncer"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Syncer API"
        ]
      }
    },
    "/api/update-token": {
      "post": {
        "description": "update token",
        "operationId": "ApiController.UpdateToken",
        "parameters": [
          {
            "description": "The id ( owner/name ) of token",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_\\-]+/[a-zA-Z0-9_\\-]+$",
              "example": "owner123/token456"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Token"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Token API"
        ]
      }
    },
    "/api/update-user": {
      "post": {
        "description": "update user",
        "operationId": "ApiController.UpdateUser",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the user",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "john_doe/example_project"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.User"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/update-webhook": {
      "post": {
        "description": "update webhook",
        "operationId": "ApiController.UpdateWebhook",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the webhook",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "default": "built-in/admin",
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "user123/webhook1"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/object.Webhook"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Webhook API"
        ]
      }
    },
    "/api/upload-resource": {
      "post": {
        "operationId": "ApiController.UploadResource",
        "parameters": [
          {
            "description": "Owner",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "JohnDoe"
            }
          },
          {
            "description": "User",
            "in": "query",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "john_doe"
            }
          },
          {
            "description": "Application",
            "in": "query",
            "name": "application",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "MyApplication"
            }
          },
          {
            "description": "Tag",
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string",
              "example": "summer-sale"
            }
          },
          {
            "description": "Parent",
            "in": "query",
            "name": "parent",
            "schema": {
              "type": "string",
              "example": "parent123"
            }
          },
          {
            "description": "Full File Path",
            "in": "query",
            "name": "fullFilePath",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/home/user/documents/report.pdf"
            }
          },
          {
            "description": "Created Time",
            "in": "query",
            "name": "createdTime",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2023-04-01T12:00:00Z"
            }
          },
          {
            "description": "Description",
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Resource"
                }
              }
            },
            "description": "FileUrl, objectKey"
          }
        },
        "tags": [
          "Resource API"
        ]
      }
    },
    "/api/user": {
      "get": {
        "description": "return Laravel compatible user information according to OAuth 2.0",
        "operationId": "ApiController.UserInfo2",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.LaravelResponse"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/userinfo": {
      "get": {
        "description": "return user information according to OIDC standards",
        "operationId": "ApiController.UserInfo",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api/verify-captcha": {
      "post": {
        "operationId": "ApiController.VerifyCaptcha",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Verification API"
        ]
      }
    },
    "/api/verify-code": {
      "post": {
        "operationId": "ApiController.VerifyCode",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Verification API"
        ]
      }
    },
    "/api/verify-invitation": {
      "get": {
        "description": "verify invitation",
        "operationId": "ApiController.VerifyInvitation",
        "parameters": [
          {
            "description": "The id ( owner/name ) of the invitation",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$",
              "example": "owner123/invitation456"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "Invitation API"
        ]
      }
    },
    "/api/webauthn/signin/begin": {
      "get": {
        "description": "WebAuthn Login Flow 1st stage",
        "operationId": "ApiController.WebAuthnSigninBegin",
        "parameters": [
          {
            "description": "owner",
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "john_doe"
            }
          },
          {
            "description": "name",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "example": "John Doe"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/protocol.CredentialAssertion"
                }
              }
            },
            "description": "The CredentialAssertion object"
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/webauthn/signin/finish": {
      "post": {
        "description": "WebAuthn Login Flow 2nd stage",
        "operationId": "ApiController.WebAuthnSigninFinish",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/protocol.CredentialAssertionResponse"
              }
            }
          },
          "description": "authenticator assertion Response",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "\"The Response object\""
          }
        },
        "tags": [
          "Login API"
        ]
      }
    },
    "/api/webauthn/signup/begin": {
      "get": {
        "description": "WebAuthn Registration Flow 1st stage",
        "operationId": "ApiController.WebAuthnSignupBegin",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/protocol.CredentialCreation"
                }
              }
            },
            "description": "The CredentialCreationOptions object"
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/webauthn/signup/finish": {
      "post": {
        "description": "WebAuthn Registration Flow 2nd stage",
        "operationId": "ApiController.WebAuthnSignupFinish",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/protocol.CredentialCreationResponse"
              }
            }
          },
          "description": "authenticator attestation Response",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/controllers.Response"
                }
              }
            },
            "description": "\"The Response object\""
          }
        },
        "tags": [
          "User API"
        ]
      }
    },
    "/api/webhook": {
      "post": {
        "operationId": "ApiController.HandleOfficialAccountEvent",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/object.Userinfo"
                }
              }
            },
            "description": "The Response object"
          }
        },
        "tags": [
          "System API"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ]
}